
testdragon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08004bc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004bc0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf94  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d36  00000000  00000000  0002d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ac  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcfd  00000000  00000000  00048cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf44  00000000  00000000  000569f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e293d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  000e2990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004968 	.word	0x08004968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004968 	.word	0x08004968

0800014c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	; (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <__io_putchar+0x38>)
 8000164:	f002 fd3b 	bl	8002bde <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <__io_putchar+0x38>)
 8000172:	f002 fd34 	bl	8002bde <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08004980 	.word	0x08004980
 8000184:	20000164 	.word	0x20000164

08000188 <_up.0>:
int main(void)
{
  /* USER CODE BEGIN 1 */


	void _up() {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	f8c7 c004 	str.w	ip, [r7, #4]
	  //digitalWrite(pinDirA, LOW );
	  //digitalWrite(pinDirB, HIGH);
	  //analogWrite(pinPWM, pwmValue);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000198:	4809      	ldr	r0, [pc, #36]	; (80001c0 <_up.0+0x38>)
 800019a:	f001 fa5e 	bl	800165a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800019e:	2201      	movs	r2, #1
 80001a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a4:	4806      	ldr	r0, [pc, #24]	; (80001c0 <_up.0+0x38>)
 80001a6:	f001 fa58 	bl	800165a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <_up.0+0x38>)
 80001b2:	f001 fa52 	bl	800165a <HAL_GPIO_WritePin>
	}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <main>:
{
 80001c4:	b5b0      	push	{r4, r5, r7, lr}
 80001c6:	b08c      	sub	sp, #48	; 0x30
 80001c8:	af02      	add	r7, sp, #8
int main(void)
 80001ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001ce:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fe86 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f99e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fbb0 	bl	800093c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 fb84 	bl	80008e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f9da 	bl	8000598 <MX_TIM1_Init>
  MX_TIM4_Init();
 80001e4:	f000 fb08 	bl	80007f8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001e8:	f000 fa84 	bl	80006f4 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	488e      	ldr	r0, [pc, #568]	; (8000428 <main+0x264>)
 80001f0:	f001 ff26 	bl	8002040 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80001f4:	2104      	movs	r1, #4
 80001f6:	488c      	ldr	r0, [pc, #560]	; (8000428 <main+0x264>)
 80001f8:	f001 ff22 	bl	8002040 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	488b      	ldr	r0, [pc, #556]	; (800042c <main+0x268>)
 8000200:	f001 ff1e 	bl	8002040 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000204:	2104      	movs	r1, #4
 8000206:	4889      	ldr	r0, [pc, #548]	; (800042c <main+0x268>)
 8000208:	f001 ff1a 	bl	8002040 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800020c:	210c      	movs	r1, #12
 800020e:	4888      	ldr	r0, [pc, #544]	; (8000430 <main+0x26c>)
 8000210:	f001 ff16 	bl	8002040 <HAL_TIM_PWM_Start>

	  printf("===\n");
 8000214:	4887      	ldr	r0, [pc, #540]	; (8000434 <main+0x270>)
 8000216:	f003 fbff 	bl	8003a18 <puts>
	  pos_pan = 100;
 800021a:	4b87      	ldr	r3, [pc, #540]	; (8000438 <main+0x274>)
 800021c:	2264      	movs	r2, #100	; 0x64
 800021e:	701a      	strb	r2, [r3, #0]
	  pos_tilt = 25;
 8000220:	4b86      	ldr	r3, [pc, #536]	; (800043c <main+0x278>)
 8000222:	2219      	movs	r2, #25
 8000224:	701a      	strb	r2, [r3, #0]
	  cam_tilt = 111;
 8000226:	4b86      	ldr	r3, [pc, #536]	; (8000440 <main+0x27c>)
 8000228:	226f      	movs	r2, #111	; 0x6f
 800022a:	701a      	strb	r2, [r3, #0]
		  /////////////////////////////////////////////////////////////////////////////////////////////////////GPIO




		  HAL_UART_Receive(&huart2, str, 2, 100);
 800022c:	2364      	movs	r3, #100	; 0x64
 800022e:	2202      	movs	r2, #2
 8000230:	4984      	ldr	r1, [pc, #528]	; (8000444 <main+0x280>)
 8000232:	4885      	ldr	r0, [pc, #532]	; (8000448 <main+0x284>)
 8000234:	f002 fd56 	bl	8002ce4 <HAL_UART_Receive>


		  char *ptr1_str = strstr(str, "0"); // sub_moter close
 8000238:	2130      	movs	r1, #48	; 0x30
 800023a:	4882      	ldr	r0, [pc, #520]	; (8000444 <main+0x280>)
 800023c:	f003 fbf4 	bl	8003a28 <strchr>
 8000240:	6278      	str	r0, [r7, #36]	; 0x24
		  char *ptr2_str = strstr(str, "1"); // sub_moter open
 8000242:	2131      	movs	r1, #49	; 0x31
 8000244:	487f      	ldr	r0, [pc, #508]	; (8000444 <main+0x280>)
 8000246:	f003 fbef 	bl	8003a28 <strchr>
 800024a:	6238      	str	r0, [r7, #32]
		  //
		  char *ptr3_str = strstr(str, "DW"); //camera down
 800024c:	497f      	ldr	r1, [pc, #508]	; (800044c <main+0x288>)
 800024e:	487d      	ldr	r0, [pc, #500]	; (8000444 <main+0x280>)
 8000250:	f003 fbf7 	bl	8003a42 <strstr>
 8000254:	61f8      	str	r0, [r7, #28]
		  char *ptr4_str = strstr(str, "UP"); //camera up
 8000256:	497e      	ldr	r1, [pc, #504]	; (8000450 <main+0x28c>)
 8000258:	487a      	ldr	r0, [pc, #488]	; (8000444 <main+0x280>)
 800025a:	f003 fbf2 	bl	8003a42 <strstr>
 800025e:	61b8      	str	r0, [r7, #24]

		  char *ptr5_str = strstr(str, "RE"); //camera 75
 8000260:	497c      	ldr	r1, [pc, #496]	; (8000454 <main+0x290>)
 8000262:	4878      	ldr	r0, [pc, #480]	; (8000444 <main+0x280>)
 8000264:	f003 fbed 	bl	8003a42 <strstr>
 8000268:	6178      	str	r0, [r7, #20]
		  char *ptr6_str = strstr(str, "CT"); //camera 110
 800026a:	497b      	ldr	r1, [pc, #492]	; (8000458 <main+0x294>)
 800026c:	4875      	ldr	r0, [pc, #468]	; (8000444 <main+0x280>)
 800026e:	f003 fbe8 	bl	8003a42 <strstr>
 8000272:	6138      	str	r0, [r7, #16]

		  char *ptr7_str = strstr(str, "3"); //LIFT DOWN
 8000274:	2133      	movs	r1, #51	; 0x33
 8000276:	4873      	ldr	r0, [pc, #460]	; (8000444 <main+0x280>)
 8000278:	f003 fbd6 	bl	8003a28 <strchr>
 800027c:	60f8      	str	r0, [r7, #12]
		  char *ptr8_str = strstr(str, "4"); //LIFT UP
 800027e:	2134      	movs	r1, #52	; 0x34
 8000280:	4870      	ldr	r0, [pc, #448]	; (8000444 <main+0x280>)
 8000282:	f003 fbd1 	bl	8003a28 <strchr>
 8000286:	60b8      	str	r0, [r7, #8]
		  strcpy(SystemStatus, "SystemStatus");
 8000288:	4a74      	ldr	r2, [pc, #464]	; (800045c <main+0x298>)
 800028a:	4b75      	ldr	r3, [pc, #468]	; (8000460 <main+0x29c>)
 800028c:	4614      	mov	r4, r2
 800028e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000290:	c407      	stmia	r4!, {r0, r1, r2}
 8000292:	7023      	strb	r3, [r4, #0]



		  /////////////////////////////////////////////////////////////////////////////////////////////
		  if(ptr7_str !=NULL) {
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d022      	beq.n	80002e0 <main+0x11c>

			  //HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
			  strcpy(SystemStatus, "LIFTUP");
 800029a:	4b70      	ldr	r3, [pc, #448]	; (800045c <main+0x298>)
 800029c:	4a71      	ldr	r2, [pc, #452]	; (8000464 <main+0x2a0>)
 800029e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a2:	6018      	str	r0, [r3, #0]
 80002a4:	3304      	adds	r3, #4
 80002a6:	8019      	strh	r1, [r3, #0]
 80002a8:	3302      	adds	r3, #2
 80002aa:	0c0a      	lsrs	r2, r1, #16
 80002ac:	701a      	strb	r2, [r3, #0]
			  //printf("LIFTUP");
			  _up();
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	469c      	mov	ip, r3
 80002b2:	f7ff ff69 	bl	8000188 <_up.0>

			  while (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == 1){}
 80002b6:	bf00      	nop
 80002b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002bc:	486a      	ldr	r0, [pc, #424]	; (8000468 <main+0x2a4>)
 80002be:	f001 f9b5 	bl	800162c <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d0f7      	beq.n	80002b8 <main+0xf4>
				  _stop();
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	469c      	mov	ip, r3
 80002cc:	f000 f904 	bl	80004d8 <_stop.2>
			  //printf("Lift up complete!");
			  strcpy(SystemStatus, "Lift up complete!");
 80002d0:	4a62      	ldr	r2, [pc, #392]	; (800045c <main+0x298>)
 80002d2:	4b66      	ldr	r3, [pc, #408]	; (800046c <main+0x2a8>)
 80002d4:	4614      	mov	r4, r2
 80002d6:	461d      	mov	r5, r3
 80002d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002dc:	682b      	ldr	r3, [r5, #0]
 80002de:	8023      	strh	r3, [r4, #0]

		  }
		  if (ptr8_str !=NULL){
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d01c      	beq.n	8000320 <main+0x15c>
			  //HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
			  strcpy(SystemStatus, "LIFTDOWN");
 80002e6:	4b5d      	ldr	r3, [pc, #372]	; (800045c <main+0x298>)
 80002e8:	4a61      	ldr	r2, [pc, #388]	; (8000470 <main+0x2ac>)
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	c303      	stmia	r3!, {r0, r1}
 80002ee:	701a      	strb	r2, [r3, #0]
			  //printf("LIFTDOWN");
			  _down();
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	469c      	mov	ip, r3
 80002f4:	f000 f8d2 	bl	800049c <_down.1>

			  while  (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6) == 1){}
 80002f8:	bf00      	nop
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	485a      	ldr	r0, [pc, #360]	; (8000468 <main+0x2a4>)
 80002fe:	f001 f995 	bl	800162c <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d0f8      	beq.n	80002fa <main+0x136>
				  _stop();
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	469c      	mov	ip, r3
 800030c:	f000 f8e4 	bl	80004d8 <_stop.2>
			  //printf("Lift down complete!");
			  strcpy(SystemStatus, "Lift down complete!");
 8000310:	4a52      	ldr	r2, [pc, #328]	; (800045c <main+0x298>)
 8000312:	4b58      	ldr	r3, [pc, #352]	; (8000474 <main+0x2b0>)
 8000314:	4614      	mov	r4, r2
 8000316:	461d      	mov	r5, r3
 8000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031c:	682b      	ldr	r3, [r5, #0]
 800031e:	6023      	str	r3, [r4, #0]


		  //////////////////////////////////////////////////////////////////////////////////////////////////////TIMER


	 	  if(ptr1_str !=NULL){ // sub_moter close
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	2b00      	cmp	r3, #0
 8000324:	d00b      	beq.n	800033e <main+0x17a>


			  pos_pan = 100;
 8000326:	4b44      	ldr	r3, [pc, #272]	; (8000438 <main+0x274>)
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	701a      	strb	r2, [r3, #0]
			  pos_tilt = 25;
 800032c:	4b43      	ldr	r3, [pc, #268]	; (800043c <main+0x278>)
 800032e:	2219      	movs	r2, #25
 8000330:	701a      	strb	r2, [r3, #0]
			  strcpy(SystemStatus, "sub_moter close");
 8000332:	4a4a      	ldr	r2, [pc, #296]	; (800045c <main+0x298>)
 8000334:	4b50      	ldr	r3, [pc, #320]	; (8000478 <main+0x2b4>)
 8000336:	4614      	mov	r4, r2
 8000338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800033a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  }
		  if(ptr2_str !=NULL ){ // sub_moter open
 800033e:	6a3b      	ldr	r3, [r7, #32]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00e      	beq.n	8000362 <main+0x19e>

			  pos_pan = 30;
 8000344:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <main+0x274>)
 8000346:	221e      	movs	r2, #30
 8000348:	701a      	strb	r2, [r3, #0]
			  pos_tilt = 100;
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <main+0x278>)
 800034c:	2264      	movs	r2, #100	; 0x64
 800034e:	701a      	strb	r2, [r3, #0]
			  strcpy(SystemStatus, "sub_moter open");
 8000350:	4a42      	ldr	r2, [pc, #264]	; (800045c <main+0x298>)
 8000352:	4b4a      	ldr	r3, [pc, #296]	; (800047c <main+0x2b8>)
 8000354:	4614      	mov	r4, r2
 8000356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000358:	c407      	stmia	r4!, {r0, r1, r2}
 800035a:	8023      	strh	r3, [r4, #0]
 800035c:	3402      	adds	r4, #2
 800035e:	0c1b      	lsrs	r3, r3, #16
 8000360:	7023      	strb	r3, [r4, #0]

		  }
		  ///////////////////
	 	  if(ptr3_str !=NULL){ // DW, camera down
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00b      	beq.n	8000380 <main+0x1bc>

	 		 cam_tilt = cam_tilt - 1;
 8000368:	4b35      	ldr	r3, [pc, #212]	; (8000440 <main+0x27c>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b33      	ldr	r3, [pc, #204]	; (8000440 <main+0x27c>)
 8000372:	701a      	strb	r2, [r3, #0]
	 		strcpy(SystemStatus, "DW, camera down");
 8000374:	4a39      	ldr	r2, [pc, #228]	; (800045c <main+0x298>)
 8000376:	4b42      	ldr	r3, [pc, #264]	; (8000480 <main+0x2bc>)
 8000378:	4614      	mov	r4, r2
 800037a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800037c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	 	  }
	 	  if(ptr4_str !=NULL ){ //UP, camera up
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d00b      	beq.n	800039e <main+0x1da>

	 		 cam_tilt = cam_tilt + 1;
 8000386:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <main+0x27c>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b2c      	ldr	r3, [pc, #176]	; (8000440 <main+0x27c>)
 8000390:	701a      	strb	r2, [r3, #0]
	 		strcpy(SystemStatus, "UP, camera up");
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <main+0x298>)
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <main+0x2c0>)
 8000396:	4614      	mov	r4, r2
 8000398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039a:	c407      	stmia	r4!, {r0, r1, r2}
 800039c:	8023      	strh	r3, [r4, #0]

	 	  }
	 	  /////////////
	 	  if(ptr5_str !=NULL){ // RE, camera 75
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <main+0x1f2>

	 		 cam_tilt = 120;
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <main+0x27c>)
 80003a6:	2278      	movs	r2, #120	; 0x78
 80003a8:	701a      	strb	r2, [r3, #0]
	 		strcpy(SystemStatus, "RE, camera 75");
 80003aa:	4a2c      	ldr	r2, [pc, #176]	; (800045c <main+0x298>)
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <main+0x2c4>)
 80003ae:	4614      	mov	r4, r2
 80003b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003b2:	c407      	stmia	r4!, {r0, r1, r2}
 80003b4:	8023      	strh	r3, [r4, #0]

	 	  }
	 	  if(ptr6_str !=NULL ){ //CT, camera 110
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00b      	beq.n	80003d4 <main+0x210>

	 		 cam_tilt = 75;
 80003bc:	4b20      	ldr	r3, [pc, #128]	; (8000440 <main+0x27c>)
 80003be:	224b      	movs	r2, #75	; 0x4b
 80003c0:	701a      	strb	r2, [r3, #0]
	 		strcpy(SystemStatus, "CT, camera 110");
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <main+0x298>)
 80003c4:	4b31      	ldr	r3, [pc, #196]	; (800048c <main+0x2c8>)
 80003c6:	4614      	mov	r4, r2
 80003c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ca:	c407      	stmia	r4!, {r0, r1, r2}
 80003cc:	8023      	strh	r3, [r4, #0]
 80003ce:	3402      	adds	r4, #2
 80003d0:	0c1b      	lsrs	r3, r3, #16
 80003d2:	7023      	strb	r3, [r4, #0]

	 	  }
	 	  /////////////
	 	  if(cam_tilt <= 94){
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <main+0x27c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b5e      	cmp	r3, #94	; 0x5e
 80003da:	d802      	bhi.n	80003e2 <main+0x21e>
	 		 cam_tilt =94;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <main+0x27c>)
 80003de:	225e      	movs	r2, #94	; 0x5e
 80003e0:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if(cam_tilt >= 111){
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <main+0x27c>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b6e      	cmp	r3, #110	; 0x6e
 80003e8:	d902      	bls.n	80003f0 <main+0x22c>
			 cam_tilt =111;
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <main+0x27c>)
 80003ec:	226f      	movs	r2, #111	; 0x6f
 80003ee:	701a      	strb	r2, [r3, #0]
		  }


	 	 TIM1 -> CCR1 = pos_tilt;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <main+0x278>)
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	4b26      	ldr	r3, [pc, #152]	; (8000490 <main+0x2cc>)
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
	 	 TIM1 -> CCR2 = pos_pan;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <main+0x274>)
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <main+0x2cc>)
 80003fe:	639a      	str	r2, [r3, #56]	; 0x38
	 	 TIM4 -> CCR4 = cam_tilt;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <main+0x27c>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <main+0x2d0>)
 8000406:	641a      	str	r2, [r3, #64]	; 0x40

	//	  __HAL_TIM_SetCompare(&htim1, &hadc1, pos_tilt);
	//	  __HAL_TIM_SetCompare(&htim1, &hadc2, pos_pan);
	 	//TIM1->CCR1 = pos_pan;
	 	//TIM1->CCR2= pos_tilt;
		  printf("SystemStatus = %s pos_pan = %d pos_tlt = %d cam_tilt =%d   \n",SystemStatus, pos_pan, pos_tilt, cam_tilt);
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <main+0x274>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <main+0x278>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4619      	mov	r1, r3
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <main+0x27c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	460b      	mov	r3, r1
 800041c:	490f      	ldr	r1, [pc, #60]	; (800045c <main+0x298>)
 800041e:	481e      	ldr	r0, [pc, #120]	; (8000498 <main+0x2d4>)
 8000420:	f003 fa74 	bl	800390c <iprintf>
	  {
 8000424:	e702      	b.n	800022c <main+0x68>
 8000426:	bf00      	nop
 8000428:	2000008c 	.word	0x2000008c
 800042c:	200000d4 	.word	0x200000d4
 8000430:	2000011c 	.word	0x2000011c
 8000434:	08004984 	.word	0x08004984
 8000438:	200001b6 	.word	0x200001b6
 800043c:	200001b7 	.word	0x200001b7
 8000440:	200001b8 	.word	0x200001b8
 8000444:	200001ac 	.word	0x200001ac
 8000448:	20000164 	.word	0x20000164
 800044c:	08004988 	.word	0x08004988
 8000450:	0800498c 	.word	0x0800498c
 8000454:	08004990 	.word	0x08004990
 8000458:	08004994 	.word	0x08004994
 800045c:	200001bc 	.word	0x200001bc
 8000460:	08004998 	.word	0x08004998
 8000464:	080049a8 	.word	0x080049a8
 8000468:	40011000 	.word	0x40011000
 800046c:	080049b0 	.word	0x080049b0
 8000470:	080049c4 	.word	0x080049c4
 8000474:	080049d0 	.word	0x080049d0
 8000478:	080049e4 	.word	0x080049e4
 800047c:	080049f4 	.word	0x080049f4
 8000480:	08004a04 	.word	0x08004a04
 8000484:	08004a14 	.word	0x08004a14
 8000488:	08004a24 	.word	0x08004a24
 800048c:	08004a34 	.word	0x08004a34
 8000490:	40012c00 	.word	0x40012c00
 8000494:	40000800 	.word	0x40000800
 8000498:	08004a44 	.word	0x08004a44

0800049c <_down.1>:
	void _down() {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15 , 1);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <_down.1+0x38>)
 80004ae:	f001 f8d4 	bl	800165a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <_down.1+0x38>)
 80004ba:	f001 f8ce 	bl	800165a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <_down.1+0x38>)
 80004c6:	f001 f8c8 	bl	800165a <HAL_GPIO_WritePin>
	}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <_stop.2>:
	void _stop() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <_stop.2+0x38>)
 80004ea:	f001 f8b6 	bl	800165a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <_stop.2+0x38>)
 80004f6:	f001 f8b0 	bl	800165a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <_stop.2+0x38>)
 8000502:	f001 f8aa 	bl	800165a <HAL_GPIO_WritePin>
	}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010c00 	.word	0x40010c00

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 f9ea 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000546:	2300      	movs	r3, #0
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800054a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f001 f8bb 	bl	80016d0 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000560:	f000 fa7e 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fb28 	bl	8001bd4 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800058a:	f000 fa69 	bl	8000a60 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3740      	adds	r7, #64	; 0x40
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2220      	movs	r2, #32
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 f993 	bl	80038fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d6:	4b45      	ldr	r3, [pc, #276]	; (80006ec <MX_TIM1_Init+0x154>)
 80005d8:	4a45      	ldr	r2, [pc, #276]	; (80006f0 <MX_TIM1_Init+0x158>)
 80005da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1279;
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <MX_TIM1_Init+0x154>)
 80005de:	f240 42ff 	movw	r2, #1279	; 0x4ff
 80005e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b41      	ldr	r3, [pc, #260]	; (80006ec <MX_TIM1_Init+0x154>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80005ea:	4b40      	ldr	r3, [pc, #256]	; (80006ec <MX_TIM1_Init+0x154>)
 80005ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <MX_TIM1_Init+0x154>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <MX_TIM1_Init+0x154>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <MX_TIM1_Init+0x154>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000604:	4839      	ldr	r0, [pc, #228]	; (80006ec <MX_TIM1_Init+0x154>)
 8000606:	f001 fc73 	bl	8001ef0 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000610:	f000 fa26 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800061e:	4619      	mov	r1, r3
 8000620:	4832      	ldr	r0, [pc, #200]	; (80006ec <MX_TIM1_Init+0x154>)
 8000622:	f001 fe71 	bl	8002308 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800062c:	f000 fa18 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000630:	482e      	ldr	r0, [pc, #184]	; (80006ec <MX_TIM1_Init+0x154>)
 8000632:	f001 fcac 	bl	8001f8e <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800063c:	f000 fa10 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800064c:	4619      	mov	r1, r3
 800064e:	4827      	ldr	r0, [pc, #156]	; (80006ec <MX_TIM1_Init+0x154>)
 8000650:	f002 f9c6 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800065a:	f000 fa01 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065e:	2360      	movs	r3, #96	; 0x60
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000666:	2300      	movs	r3, #0
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066a:	2300      	movs	r3, #0
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_TIM1_Init+0x154>)
 8000684:	f001 fd7e 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800068e:	f000 f9e7 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	2204      	movs	r2, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_TIM1_Init+0x154>)
 800069c:	f001 fd72 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006a6:	f000 f9db 	bl	8000a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <MX_TIM1_Init+0x154>)
 80006ce:	f002 f9e5 	bl	8002a9c <HAL_TIMEx_ConfigBreakDeadTime>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80006d8:	f000 f9c2 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <MX_TIM1_Init+0x154>)
 80006de:	f000 fa3d 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	40012c00 	.word	0x40012c00

080006f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	; 0x38
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_TIM3_Init+0xfc>)
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_TIM3_Init+0x100>)
 8000728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1279;
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_TIM3_Init+0xfc>)
 800072c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8000730:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_TIM3_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_TIM3_Init+0xfc>)
 800073a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_TIM3_Init+0xfc>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_TIM3_Init+0xfc>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800074c:	4828      	ldr	r0, [pc, #160]	; (80007f0 <MX_TIM3_Init+0xfc>)
 800074e:	f001 fbcf 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000758:	f000 f982 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000766:	4619      	mov	r1, r3
 8000768:	4821      	ldr	r0, [pc, #132]	; (80007f0 <MX_TIM3_Init+0xfc>)
 800076a:	f001 fdcd 	bl	8002308 <HAL_TIM_ConfigClockSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000774:	f000 f974 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000778:	481d      	ldr	r0, [pc, #116]	; (80007f0 <MX_TIM3_Init+0xfc>)
 800077a:	f001 fc08 	bl	8001f8e <HAL_TIM_PWM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000784:	f000 f96c 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4619      	mov	r1, r3
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_TIM3_Init+0xfc>)
 8000798:	f002 f922 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 f95d 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a6:	2360      	movs	r3, #96	; 0x60
 80007a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_TIM3_Init+0xfc>)
 80007be:	f001 fce1 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80007c8:	f000 f94a 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2204      	movs	r2, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <MX_TIM3_Init+0xfc>)
 80007d4:	f001 fcd6 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80007de:	f000 f93f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <MX_TIM3_Init+0xfc>)
 80007e4:	f000 f9ba 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 80007e8:	bf00      	nop
 80007ea:	3738      	adds	r7, #56	; 0x38
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000d4 	.word	0x200000d4
 80007f4:	40000400 	.word	0x40000400

080007f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000828:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800082a:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <MX_TIM4_Init+0xec>)
 800082c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1279;
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_TIM4_Init+0xe8>)
 8000830:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8000834:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_TIM4_Init+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800083e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_TIM4_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <MX_TIM4_Init+0xe8>)
 8000852:	f001 fb4d 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800085c:	f000 f900 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086a:	4619      	mov	r1, r3
 800086c:	481c      	ldr	r0, [pc, #112]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800086e:	f001 fd4b 	bl	8002308 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000878:	f000 f8f2 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800087e:	f001 fb86 	bl	8001f8e <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000888:	f000 f8ea 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_TIM4_Init+0xe8>)
 800089c:	f002 f8a0 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008a6:	f000 f8db 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008aa:	2360      	movs	r3, #96	; 0x60
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	220c      	movs	r2, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM4_Init+0xe8>)
 80008c2:	f001 fc5f 	bl	8002184 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008cc:	f000 f8c8 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM4_Init+0xe8>)
 80008d2:	f000 f943 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3738      	adds	r7, #56	; 0x38
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000011c 	.word	0x2000011c
 80008e4:	40000800 	.word	0x40000800

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f002 f90d 	bl	8002b3e <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f899 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000164 	.word	0x20000164
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <MX_GPIO_Init+0x110>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a3d      	ldr	r2, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x110>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <MX_GPIO_Init+0x110>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <MX_GPIO_Init+0x110>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a37      	ldr	r2, [pc, #220]	; (8000a4c <MX_GPIO_Init+0x110>)
 800096e:	f043 0320 	orr.w	r3, r3, #32
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <MX_GPIO_Init+0x110>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0320 	and.w	r3, r3, #32
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <MX_GPIO_Init+0x110>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <MX_GPIO_Init+0x110>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <MX_GPIO_Init+0x110>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_GPIO_Init+0x110>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <MX_GPIO_Init+0x110>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_GPIO_Init+0x110>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4826      	ldr	r0, [pc, #152]	; (8000a50 <MX_GPIO_Init+0x114>)
 80009b6:	f000 fe50 	bl	800165a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR3_Pin|MOTOR2_Pin|MOTOR1_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x118>)
 80009c2:	f000 fe4a 	bl	800165a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_GPIO_Init+0x11c>)
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4820      	ldr	r0, [pc, #128]	; (8000a5c <MX_GPIO_Init+0x120>)
 80009dc:	f000 fca2 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e0:	2320      	movs	r3, #32
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <MX_GPIO_Init+0x114>)
 80009f8:	f000 fc94 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_Pin MOTOR2_Pin MOTOR1_Pin */
  GPIO_InitStruct.Pin = MOTOR3_Pin|MOTOR2_Pin|MOTOR1_Pin;
 80009fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x118>)
 8000a16:	f000 fc85 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000a1a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <MX_GPIO_Init+0x120>)
 8000a30:	f000 fc78 	bl	8001324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2028      	movs	r0, #40	; 0x28
 8000a3a:	f000 fb8a 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	; 0x28
 8000a40:	f000 fba3 	bl	800118a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	10110000 	.word	0x10110000
 8000a5c:	40011000 	.word	0x40011000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x60>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_MspInit+0x60>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10c      	bne.n	8000afc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000afa:	e022      	b.n	8000b42 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_TIM_Base_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10c      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
}
 8000b1e:	e010      	b.n	8000b42 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_TIM_Base_MspInit+0x88>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10b      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_TIM_Base_MspInit+0x80>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40000800 	.word	0x40000800

08000b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <HAL_TIM_MspPostInit+0xd4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d119      	bne.n	8000bb0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <HAL_TIM_MspPostInit+0xdc>)
 8000baa:	f000 fbbb 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bae:	e03b      	b.n	8000c28 <HAL_TIM_MspPostInit+0xcc>
  else if(htim->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_TIM_MspPostInit+0xe0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d118      	bne.n	8000bec <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <HAL_TIM_MspPostInit+0xdc>)
 8000be6:	f000 fb9d 	bl	8001324 <HAL_GPIO_Init>
}
 8000bea:	e01d      	b.n	8000c28 <HAL_TIM_MspPostInit+0xcc>
  else if(htim->Instance==TIM4)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_TIM_MspPostInit+0xe4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d118      	bne.n	8000c28 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_TIM_MspPostInit+0xd8>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <HAL_TIM_MspPostInit+0xe8>)
 8000c24:	f000 fb7e 	bl	8001324 <HAL_GPIO_Init>
}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40000400 	.word	0x40000400
 8000c40:	40000800 	.word	0x40000800
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x80>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d12b      	bne.n	8000cc0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	61d3      	str	r3, [r2, #28]
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000cac:	f000 fb3a 	bl	8001324 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2026      	movs	r0, #38	; 0x26
 8000cb6:	f000 fa4c 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cba:	2026      	movs	r0, #38	; 0x26
 8000cbc:	f000 fa65 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f927 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART2_IRQHandler+0x10>)
 8000d2a:	f002 f86d 	bl	8002e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000164 	.word	0x20000164

08000d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d40:	f000 fca4 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff f9d5 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de0:	605a      	str	r2, [r3, #4]
  return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f002 fd2c 	bl	80038a8 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20005000 	.word	0x20005000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	200001d0 	.word	0x200001d0
 8000e84:	200001e8 	.word	0x200001e8

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Reset_Handler>:
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x12>)
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x1a>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:
 8000e9e:	58d4      	ldr	r4, [r2, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:
 8000ea4:	18c4      	adds	r4, r0, r3
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x1e>)
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x22>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
 8000eba:	f7ff ffe5 	bl	8000e88 <SystemInit>
 8000ebe:	f002 fcf9 	bl	80038b4 <__libc_init_array>
 8000ec2:	f7ff f97f 	bl	80001c4 <main>
 8000ec6:	4770      	bx	lr
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000070 	.word	0x20000070
 8000ed0:	08004b50 	.word	0x08004b50
 8000ed4:	20000070 	.word	0x20000070
 8000ed8:	200001e8 	.word	0x200001e8

08000edc <ADC1_2_IRQHandler>:
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f923 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fdb6 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f93b 	bl	80011a6 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f903 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001d4 	.word	0x200001d4

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	200001d4 	.word	0x200001d4

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4906      	ldr	r1, [pc, #24]	; (800103c <__NVIC_EnableIRQ+0x34>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff90 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff2d 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff42 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff35 	bl	8001008 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d008      	beq.n	80011e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2204      	movs	r2, #4
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e020      	b.n	800122a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 020e 	bic.w	r2, r2, #14
 80011f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d005      	beq.n	8001258 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e051      	b.n	80012fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_DMA_Abort_IT+0xd4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d029      	beq.n	80012d6 <HAL_DMA_Abort_IT+0xa2>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_DMA_Abort_IT+0xd8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d022      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x9e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_DMA_Abort_IT+0xdc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01a      	beq.n	80012cc <HAL_DMA_Abort_IT+0x98>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_DMA_Abort_IT+0xe0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d012      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x92>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_DMA_Abort_IT+0xe4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00a      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x8c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_DMA_Abort_IT+0xe8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d102      	bne.n	80012ba <HAL_DMA_Abort_IT+0x86>
 80012b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b8:	e00e      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012be:	e00b      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	e008      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	e005      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	e002      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012d2:	2310      	movs	r3, #16
 80012d4:	e000      	b.n	80012d8 <HAL_DMA_Abort_IT+0xa4>
 80012d6:	2301      	movs	r3, #1
 80012d8:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_DMA_Abort_IT+0xec>)
 80012da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
    } 
  }
  return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020008 	.word	0x40020008
 800130c:	4002001c 	.word	0x4002001c
 8001310:	40020030 	.word	0x40020030
 8001314:	40020044 	.word	0x40020044
 8001318:	40020058 	.word	0x40020058
 800131c:	4002006c 	.word	0x4002006c
 8001320:	40020000 	.word	0x40020000

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e169      	b.n	800160c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001338:	2201      	movs	r2, #1
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 8158 	bne.w	8001606 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a9a      	ldr	r2, [pc, #616]	; (80015c4 <HAL_GPIO_Init+0x2a0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d05e      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001360:	4a98      	ldr	r2, [pc, #608]	; (80015c4 <HAL_GPIO_Init+0x2a0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d875      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001366:	4a98      	ldr	r2, [pc, #608]	; (80015c8 <HAL_GPIO_Init+0x2a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d058      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 800136c:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <HAL_GPIO_Init+0x2a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d86f      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001372:	4a96      	ldr	r2, [pc, #600]	; (80015cc <HAL_GPIO_Init+0x2a8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d052      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001378:	4a94      	ldr	r2, [pc, #592]	; (80015cc <HAL_GPIO_Init+0x2a8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d869      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800137e:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d04c      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001384:	4a92      	ldr	r2, [pc, #584]	; (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d863      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800138a:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_GPIO_Init+0x2b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d046      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001390:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_GPIO_Init+0x2b0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d85d      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d82a      	bhi.n	80013f0 <HAL_GPIO_Init+0xcc>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d859      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_GPIO_Init+0x80>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	0800141f 	.word	0x0800141f
 80013a8:	080013f9 	.word	0x080013f9
 80013ac:	0800140b 	.word	0x0800140b
 80013b0:	0800144d 	.word	0x0800144d
 80013b4:	08001453 	.word	0x08001453
 80013b8:	08001453 	.word	0x08001453
 80013bc:	08001453 	.word	0x08001453
 80013c0:	08001453 	.word	0x08001453
 80013c4:	08001453 	.word	0x08001453
 80013c8:	08001453 	.word	0x08001453
 80013cc:	08001453 	.word	0x08001453
 80013d0:	08001453 	.word	0x08001453
 80013d4:	08001453 	.word	0x08001453
 80013d8:	08001453 	.word	0x08001453
 80013dc:	08001453 	.word	0x08001453
 80013e0:	08001453 	.word	0x08001453
 80013e4:	08001453 	.word	0x08001453
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001415 	.word	0x08001415
 80013f0:	4a79      	ldr	r2, [pc, #484]	; (80015d8 <HAL_GPIO_Init+0x2b4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f6:	e02c      	b.n	8001452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e029      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e024      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	3308      	adds	r3, #8
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e01f      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	330c      	adds	r3, #12
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e01a      	b.n	8001454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001426:	2304      	movs	r3, #4
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e013      	b.n	8001454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	611a      	str	r2, [r3, #16]
          break;
 800143e:	e009      	b.n	8001454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	615a      	str	r2, [r3, #20]
          break;
 800144a:	e003      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x130>
          break;
 8001452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d801      	bhi.n	800145e <HAL_GPIO_Init+0x13a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	e001      	b.n	8001462 <HAL_GPIO_Init+0x13e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d802      	bhi.n	8001470 <HAL_GPIO_Init+0x14c>
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x152>
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	3b08      	subs	r3, #8
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	210f      	movs	r1, #15
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	6a39      	ldr	r1, [r7, #32]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	431a      	orrs	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80b1 	beq.w	8001606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014bc:	4a48      	ldr	r2, [pc, #288]	; (80015e0 <HAL_GPIO_Init+0x2bc>)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_GPIO_Init+0x2c0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d013      	beq.n	8001510 <HAL_GPIO_Init+0x1ec>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_GPIO_Init+0x2c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00d      	beq.n	800150c <HAL_GPIO_Init+0x1e8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3e      	ldr	r2, [pc, #248]	; (80015ec <HAL_GPIO_Init+0x2c8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_Init+0x1e4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <HAL_GPIO_Init+0x2cc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_Init+0x1e0>
 8001500:	2303      	movs	r3, #3
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001504:	2304      	movs	r3, #4
 8001506:	e004      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001508:	2302      	movs	r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001510:	2300      	movs	r3, #0
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001522:	492f      	ldr	r1, [pc, #188]	; (80015e0 <HAL_GPIO_Init+0x2bc>)
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	492c      	ldr	r1, [pc, #176]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4928      	ldr	r1, [pc, #160]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001554:	4013      	ands	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	491e      	ldr	r1, [pc, #120]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4918      	ldr	r1, [pc, #96]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4914      	ldr	r1, [pc, #80]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d021      	beq.n	80015f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
 80015c0:	e021      	b.n	8001606 <HAL_GPIO_Init+0x2e2>
 80015c2:	bf00      	nop
 80015c4:	10320000 	.word	0x10320000
 80015c8:	10310000 	.word	0x10310000
 80015cc:	10220000 	.word	0x10220000
 80015d0:	10210000 	.word	0x10210000
 80015d4:	10120000 	.word	0x10120000
 80015d8:	10110000 	.word	0x10110000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40011400 	.word	0x40011400
 80015f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	43db      	mvns	r3, r3
 8001600:	4909      	ldr	r1, [pc, #36]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001602:	4013      	ands	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae8e 	bne.w	8001338 <HAL_GPIO_Init+0x14>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	372c      	adds	r7, #44	; 0x2c
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166a:	787b      	ldrb	r3, [r7, #1]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001676:	e003      	b.n	8001680 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
	...

0800168c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f806 	bl	80016bc <HAL_GPIO_EXTI_Callback>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e272      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b92      	ldr	r3, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 8001708:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b89      	ldr	r3, [pc, #548]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e24c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b80      	ldr	r3, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a7f      	ldr	r2, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b7b      	ldr	r3, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7a      	ldr	r2, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b6b      	ldr	r3, [pc, #428]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbf0 	bl	8000f90 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fbec 	bl	8000f90 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e200      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fbdc 	bl	8000f90 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbd8 	bl	8000f90 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1ec      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c0      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4939      	ldr	r1, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fb91 	bl	8000f90 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fb8d 	bl	8000f90 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4927      	ldr	r1, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb70 	bl	8000f90 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb6c 	bl	8000f90 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e180      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03a      	beq.n	8001954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb50 	bl	8000f90 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb4c 	bl	8000f90 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e160      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 face 	bl	8001eb4 <RCC_Delay>
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fb36 	bl	8000f90 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fb32 	bl	8000f90 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d908      	bls.n	8001948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e146      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	42420000 	.word	0x42420000
 8001944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e9      	bne.n	8001928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a6 	beq.w	8001aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff faf3 	bl	8000f90 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff faef 	bl	8000f90 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e103      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x334>
 80019ea:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x356>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a60      	ldr	r2, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff faa3 	bl	8000f90 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa9f 	bl	8000f90 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0b1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x37e>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fa8d 	bl	8000f90 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fa89 	bl	8000f90 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d061      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d146      	bne.n	8001b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa5d 	bl	8000f90 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fa59 	bl	8000f90 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e06d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	430b      	orrs	r3, r1
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa2d 	bl	8000f90 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fa29 	bl	8000f90 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
 8001b58:	e035      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa16 	bl	8000f90 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa12 	bl	8000f90 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e026      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x498>
 8001b86:	e01e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e019      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x500>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f964 	bl	8000f90 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f960 	bl	8000f90 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f8c2 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004a84 	.word	0x08004a84
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x36>
 8001dd6:	e027      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	e027      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	613b      	str	r3, [r7, #16]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	693b      	ldr	r3, [r7, #16]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	007a1200 	.word	0x007a1200
 8001e44:	08004a9c 	.word	0x08004a9c
 8001e48:	08004aac 	.word	0x08004aac
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08004a94 	.word	0x08004a94

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08004a94 	.word	0x08004a94

08001eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <RCC_Delay+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <RCC_Delay+0x38>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed0:	bf00      	nop
  }
  while (Delay --);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	60fa      	str	r2, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <RCC_Delay+0x1c>
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fdda 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 fab2 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e041      	b.n	8002024 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f839 	bl	800202c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f000 fa63 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
	...

08002040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_TIM_PWM_Start+0x24>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e022      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d109      	bne.n	800207e <HAL_TIM_PWM_Start+0x3e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	e015      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d109      	bne.n	8002098 <HAL_TIM_PWM_Start+0x58>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e008      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e05e      	b.n	8002170 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <HAL_TIM_PWM_Start+0x82>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c0:	e013      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d104      	bne.n	80020d2 <HAL_TIM_PWM_Start+0x92>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	e00b      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start+0xa2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e0:	e003      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fc50 	bl	8002998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_TIM_PWM_Start+0x138>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d107      	bne.n	8002112 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_TIM_PWM_Start+0x138>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00e      	beq.n	800213a <HAL_TIM_PWM_Start+0xfa>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d009      	beq.n	800213a <HAL_TIM_PWM_Start+0xfa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_TIM_PWM_Start+0x13c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_TIM_PWM_Start+0xfa>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_TIM_PWM_Start+0x140>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d111      	bne.n	800215e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d010      	beq.n	800216e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	e007      	b.n	800216e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40012c00 	.word	0x40012c00
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800

08002184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0ae      	b.n	8002300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	f200 809f 	bhi.w	80022f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	080022f1 	.word	0x080022f1
 80021c0:	080022f1 	.word	0x080022f1
 80021c4:	080022f1 	.word	0x080022f1
 80021c8:	0800222d 	.word	0x0800222d
 80021cc:	080022f1 	.word	0x080022f1
 80021d0:	080022f1 	.word	0x080022f1
 80021d4:	080022f1 	.word	0x080022f1
 80021d8:	0800226f 	.word	0x0800226f
 80021dc:	080022f1 	.word	0x080022f1
 80021e0:	080022f1 	.word	0x080022f1
 80021e4:	080022f1 	.word	0x080022f1
 80021e8:	080022af 	.word	0x080022af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f9b2 	bl	800255c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	619a      	str	r2, [r3, #24]
      break;
 800222a:	e064      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f9f8 	bl	8002628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6999      	ldr	r1, [r3, #24]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	021a      	lsls	r2, r3, #8
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	619a      	str	r2, [r3, #24]
      break;
 800226c:	e043      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fa41 	bl	80026fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0208 	orr.w	r2, r2, #8
 8002288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0204 	bic.w	r2, r2, #4
 8002298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69d9      	ldr	r1, [r3, #28]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]
      break;
 80022ac:	e023      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa8b 	bl	80027d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69d9      	ldr	r1, [r3, #28]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	021a      	lsls	r2, r3, #8
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	61da      	str	r2, [r3, #28]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	75fb      	strb	r3, [r7, #23]
      break;
 80022f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x1c>
 8002320:	2302      	movs	r3, #2
 8002322:	e0b4      	b.n	800248e <HAL_TIM_ConfigClockSource+0x186>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800234a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235c:	d03e      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0xd4>
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	f200 8087 	bhi.w	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	f000 8086 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x172>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d87f      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b70      	cmp	r3, #112	; 0x70
 8002376:	d01a      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xa6>
 8002378:	2b70      	cmp	r3, #112	; 0x70
 800237a:	d87b      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b60      	cmp	r3, #96	; 0x60
 800237e:	d050      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x11a>
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d877      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b50      	cmp	r3, #80	; 0x50
 8002386:	d03c      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0xfa>
 8002388:	2b50      	cmp	r3, #80	; 0x50
 800238a:	d873      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d058      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x13a>
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d86f      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b30      	cmp	r3, #48	; 0x30
 8002396:	d064      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x15a>
 8002398:	2b30      	cmp	r3, #48	; 0x30
 800239a:	d86b      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b20      	cmp	r3, #32
 800239e:	d060      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d867      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05c      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d05a      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x15a>
 80023ac:	e062      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 facc 	bl	800295a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	609a      	str	r2, [r3, #8]
      break;
 80023da:	e04f      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f000 fab5 	bl	800295a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fe:	609a      	str	r2, [r3, #8]
      break;
 8002400:	e03c      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 fa2c 	bl	800286c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2150      	movs	r1, #80	; 0x50
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fa83 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 8002420:	e02c      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	f000 fa4a 	bl	80028c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2160      	movs	r1, #96	; 0x60
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa73 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 8002440:	e01c      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fa0c 	bl	800286c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2140      	movs	r1, #64	; 0x40
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fa63 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 8002460:	e00c      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f000 fa5a 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 8002472:	e003      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e000      	b.n	800247c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800247a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00b      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d007      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <TIM_Base_SetConfig+0xbc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a25      	ldr	r2, [pc, #148]	; (8002558 <TIM_Base_SetConfig+0xc0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <TIM_Base_SetConfig+0xbc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <TIM_Base_SetConfig+0xc0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800

0800255c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f023 0201 	bic.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10c      	bne.n	80025d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0308 	bic.w	r3, r3, #8
 80025be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00

08002628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 0210 	bic.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10d      	bne.n	80026a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d113      	bne.n	80026d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00

080026fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10d      	bne.n	8002776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d113      	bne.n	80027a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00

080027d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <TIM_OC4_SetConfig+0x98>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d109      	bne.n	8002844 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40012c00 	.word	0x40012c00

0800286c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0210 	bic.w	r2, r3, #16
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	031b      	lsls	r3, r3, #12
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	f043 0307 	orr.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800295a:	b480      	push	{r7}
 800295c:	b087      	sub	sp, #28
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2201      	movs	r2, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	401a      	ands	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e046      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e03d      	b.n	8002b34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e042      	b.n	8002bd6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe f86f 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2224      	movs	r2, #36	; 0x24
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fe02 	bl	800378c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b08a      	sub	sp, #40	; 0x28
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d16d      	bne.n	8002cda <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_Transmit+0x2c>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e066      	b.n	8002cdc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f9b8 	bl	8000f90 <HAL_GetTick>
 8002c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d108      	bne.n	8002c4a <HAL_UART_Transmit+0x6c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	e003      	b.n	8002c52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c52:	e02a      	b.n	8002caa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb8a 	bl	8003378 <UART_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e036      	b.n	8002cdc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	3302      	adds	r3, #2
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e007      	b.n	8002c9c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1cf      	bne.n	8002c54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fb5a 	bl	8003378 <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e006      	b.n	8002cdc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d17c      	bne.n	8002dfe <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Receive+0x2c>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e075      	b.n	8002e00 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2222      	movs	r2, #34	; 0x22
 8002d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d28:	f7fe f932 	bl	8000f90 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d108      	bne.n	8002d56 <HAL_UART_Receive+0x72>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e003      	b.n	8002d5e <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d5e:	e043      	b.n	8002de8 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2120      	movs	r1, #32
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb04 	bl	8003378 <UART_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e042      	b.n	8002e00 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	3302      	adds	r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e01f      	b.n	8002dda <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	d007      	beq.n	8002db4 <HAL_UART_Receive+0xd0>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_UART_Receive+0xde>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e008      	b.n	8002dd4 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1b6      	bne.n	8002d60 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0ba      	sub	sp, #232	; 0xe8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_UART_IRQHandler+0x66>
 8002e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fbd1 	bl	800360e <UART_Receive_IT>
      return;
 8002e6c:	e25b      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80de 	beq.w	8003034 <HAL_UART_IRQHandler+0x22c>
 8002e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80d1 	beq.w	8003034 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xae>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_UART_IRQHandler+0xd2>
 8002ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xf6>
 8002ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_UART_IRQHandler+0x126>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0208 	orr.w	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 81f2 	beq.w	800331c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_UART_IRQHandler+0x14e>
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb5c 	bl	800360e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_UART_IRQHandler+0x17a>
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04f      	beq.n	8003022 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa66 	bl	8003454 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d041      	beq.n	800301a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1d9      	bne.n	8002f96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d013      	beq.n	8003012 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	4a7e      	ldr	r2, [pc, #504]	; (80031e8 <HAL_UART_IRQHandler+0x3e0>)
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f91c 	bl	8001234 <HAL_DMA_Abort_IT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300c:	4610      	mov	r0, r2
 800300e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00e      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f99c 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e00a      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f998 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	e006      	b.n	8003030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f994 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800302e:	e175      	b.n	800331c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	bf00      	nop
    return;
 8003032:	e173      	b.n	800331c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b01      	cmp	r3, #1
 800303a:	f040 814f 	bne.w	80032dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8148 	beq.w	80032dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800304c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8141 	beq.w	80032dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80b6 	beq.w	80031ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800308c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8145 	beq.w	8003320 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800309a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309e:	429a      	cmp	r2, r3
 80030a0:	f080 813e 	bcs.w	8003320 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f000 8088 	beq.w	80031c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1d9      	bne.n	80030b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003128:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800312c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003130:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800313a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e1      	bne.n	8003104 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003164:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003166:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800316a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e3      	bne.n	8003140 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	f023 0310 	bic.w	r3, r3, #16
 800319c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e3      	bne.n	8003186 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fffb 	bl	80011be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f8bf 	bl	8003362 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031e4:	e09c      	b.n	8003320 <HAL_UART_IRQHandler+0x518>
 80031e6:	bf00      	nop
 80031e8:	08003519 	.word	0x08003519
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 808e 	beq.w	8003324 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8089 	beq.w	8003324 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003236:	647a      	str	r2, [r7, #68]	; 0x44
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800323c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e3      	bne.n	8003212 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	623b      	str	r3, [r7, #32]
   return(result);
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800326e:	633a      	str	r2, [r7, #48]	; 0x30
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e3      	bne.n	800324a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0310 	bic.w	r3, r3, #16
 80032a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	617b      	str	r3, [r7, #20]
   return(result);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e3      	bne.n	8003290 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f844 	bl	8003362 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032da:	e023      	b.n	8003324 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_UART_IRQHandler+0x4f4>
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f923 	bl	8003540 <UART_Transmit_IT>
    return;
 80032fa:	e014      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_UART_IRQHandler+0x51e>
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f962 	bl	80035de <UART_EndTransmit_IT>
    return;
 800331a:	e004      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
    return;
 800331c:	bf00      	nop
 800331e:	e002      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
      return;
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <HAL_UART_IRQHandler+0x51e>
      return;
 8003324:	bf00      	nop
  }
}
 8003326:	37e8      	adds	r7, #232	; 0xe8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b090      	sub	sp, #64	; 0x40
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003388:	e050      	b.n	800342c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d04c      	beq.n	800342c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003398:	f7fd fdfa 	bl	8000f90 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d241      	bcs.n	800342c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c8:	637a      	str	r2, [r7, #52]	; 0x34
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3314      	adds	r3, #20
 80033e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	613b      	str	r3, [r7, #16]
   return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033fc:	623a      	str	r2, [r7, #32]
 80033fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69f9      	ldr	r1, [r7, #28]
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	61bb      	str	r3, [r7, #24]
   return(result);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e00f      	b.n	800344c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d09f      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3740      	adds	r7, #64	; 0x40
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b095      	sub	sp, #84	; 0x54
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800347c:	643a      	str	r2, [r7, #64]	; 0x40
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3314      	adds	r3, #20
 8003496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3314      	adds	r3, #20
 80034ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d119      	bne.n	8003500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	60bb      	str	r3, [r7, #8]
   return(result);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f023 0310 	bic.w	r3, r3, #16
 80034e2:	647b      	str	r3, [r7, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ec:	61ba      	str	r2, [r7, #24]
 80034ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6979      	ldr	r1, [r7, #20]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	613b      	str	r3, [r7, #16]
   return(result);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800350e:	bf00      	nop
 8003510:	3754      	adds	r7, #84	; 0x54
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff0c 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b21      	cmp	r3, #33	; 0x21
 8003552:	d13e      	bne.n	80035d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d114      	bne.n	8003588 <UART_Transmit_IT+0x48>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d110      	bne.n	8003588 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]
 8003586:	e008      	b.n	800359a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6211      	str	r1, [r2, #32]
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4619      	mov	r1, r3
 80035a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe94 	bl	800332c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08c      	sub	sp, #48	; 0x30
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b22      	cmp	r3, #34	; 0x22
 8003620:	f040 80ae 	bne.w	8003780 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d117      	bne.n	800365e <UART_Receive_IT+0x50>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	b29a      	uxth	r2, r3
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	1c9a      	adds	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
 800365c:	e026      	b.n	80036ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d007      	beq.n	8003682 <UART_Receive_IT+0x74>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <UART_Receive_IT+0x82>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e008      	b.n	80036a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d15d      	bne.n	800377c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0220 	bic.w	r2, r2, #32
 80036ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	2b01      	cmp	r3, #1
 8003704:	d135      	bne.n	8003772 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	613b      	str	r3, [r7, #16]
   return(result);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	623a      	str	r2, [r7, #32]
 800372e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	69f9      	ldr	r1, [r7, #28]
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	61bb      	str	r3, [r7, #24]
   return(result);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d10a      	bne.n	8003764 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fdf9 	bl	8003362 <HAL_UARTEx_RxEventCallback>
 8003770:	e002      	b.n	8003778 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fde3 	bl	800333e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e002      	b.n	8003782 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3730      	adds	r7, #48	; 0x30
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037c6:	f023 030c 	bic.w	r3, r3, #12
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2c      	ldr	r2, [pc, #176]	; (80038a0 <UART_SetConfig+0x114>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fe fb4a 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	e002      	b.n	8003802 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037fc:	f7fe fb32 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009a      	lsls	r2, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <UART_SetConfig+0x118>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	0119      	lsls	r1, r3, #4
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fbb2 f2f3 	udiv	r2, r2, r3
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <UART_SetConfig+0x118>)
 800383a:	fba3 0302 	umull	r0, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2064      	movs	r0, #100	; 0x64
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3332      	adds	r3, #50	; 0x32
 800384c:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <UART_SetConfig+0x118>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003858:	4419      	add	r1, r3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <UART_SetConfig+0x118>)
 8003872:	fba3 0302 	umull	r0, r3, r3, r2
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2064      	movs	r0, #100	; 0x64
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	3332      	adds	r3, #50	; 0x32
 8003884:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <UART_SetConfig+0x118>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	440a      	add	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40013800 	.word	0x40013800
 80038a4:	51eb851f 	.word	0x51eb851f

080038a8 <__errno>:
 80038a8:	4b01      	ldr	r3, [pc, #4]	; (80038b0 <__errno+0x8>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	; (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	; (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	f001 f850 	bl	8004968 <_init>
 80038c8:	2600      	movs	r6, #0
 80038ca:	4d0a      	ldr	r5, [pc, #40]	; (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	; (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08004b48 	.word	0x08004b48
 80038f0:	08004b48 	.word	0x08004b48
 80038f4:	08004b48 	.word	0x08004b48
 80038f8:	08004b4c 	.word	0x08004b4c

080038fc <memset>:
 80038fc:	4603      	mov	r3, r0
 80038fe:	4402      	add	r2, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <iprintf>:
 800390c:	b40f      	push	{r0, r1, r2, r3}
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <iprintf+0x2c>)
 8003910:	b513      	push	{r0, r1, r4, lr}
 8003912:	681c      	ldr	r4, [r3, #0]
 8003914:	b124      	cbz	r4, 8003920 <iprintf+0x14>
 8003916:	69a3      	ldr	r3, [r4, #24]
 8003918:	b913      	cbnz	r3, 8003920 <iprintf+0x14>
 800391a:	4620      	mov	r0, r4
 800391c:	f000 fa7e 	bl	8003e1c <__sinit>
 8003920:	ab05      	add	r3, sp, #20
 8003922:	4620      	mov	r0, r4
 8003924:	9a04      	ldr	r2, [sp, #16]
 8003926:	68a1      	ldr	r1, [r4, #8]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	f000 fc81 	bl	8004230 <_vfiprintf_r>
 800392e:	b002      	add	sp, #8
 8003930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003934:	b004      	add	sp, #16
 8003936:	4770      	bx	lr
 8003938:	2000000c 	.word	0x2000000c

0800393c <_puts_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	460e      	mov	r6, r1
 8003940:	4605      	mov	r5, r0
 8003942:	b118      	cbz	r0, 800394c <_puts_r+0x10>
 8003944:	6983      	ldr	r3, [r0, #24]
 8003946:	b90b      	cbnz	r3, 800394c <_puts_r+0x10>
 8003948:	f000 fa68 	bl	8003e1c <__sinit>
 800394c:	69ab      	ldr	r3, [r5, #24]
 800394e:	68ac      	ldr	r4, [r5, #8]
 8003950:	b913      	cbnz	r3, 8003958 <_puts_r+0x1c>
 8003952:	4628      	mov	r0, r5
 8003954:	f000 fa62 	bl	8003e1c <__sinit>
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <_puts_r+0xd0>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d120      	bne.n	80039a0 <_puts_r+0x64>
 800395e:	686c      	ldr	r4, [r5, #4]
 8003960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003962:	07db      	lsls	r3, r3, #31
 8003964:	d405      	bmi.n	8003972 <_puts_r+0x36>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	0598      	lsls	r0, r3, #22
 800396a:	d402      	bmi.n	8003972 <_puts_r+0x36>
 800396c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396e:	f000 faf3 	bl	8003f58 <__retarget_lock_acquire_recursive>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	0719      	lsls	r1, r3, #28
 8003976:	d51d      	bpl.n	80039b4 <_puts_r+0x78>
 8003978:	6923      	ldr	r3, [r4, #16]
 800397a:	b1db      	cbz	r3, 80039b4 <_puts_r+0x78>
 800397c:	3e01      	subs	r6, #1
 800397e:	68a3      	ldr	r3, [r4, #8]
 8003980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003984:	3b01      	subs	r3, #1
 8003986:	60a3      	str	r3, [r4, #8]
 8003988:	bb39      	cbnz	r1, 80039da <_puts_r+0x9e>
 800398a:	2b00      	cmp	r3, #0
 800398c:	da38      	bge.n	8003a00 <_puts_r+0xc4>
 800398e:	4622      	mov	r2, r4
 8003990:	210a      	movs	r1, #10
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f86c 	bl	8003a70 <__swbuf_r>
 8003998:	3001      	adds	r0, #1
 800399a:	d011      	beq.n	80039c0 <_puts_r+0x84>
 800399c:	250a      	movs	r5, #10
 800399e:	e011      	b.n	80039c4 <_puts_r+0x88>
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <_puts_r+0xd4>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	d101      	bne.n	80039aa <_puts_r+0x6e>
 80039a6:	68ac      	ldr	r4, [r5, #8]
 80039a8:	e7da      	b.n	8003960 <_puts_r+0x24>
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <_puts_r+0xd8>)
 80039ac:	429c      	cmp	r4, r3
 80039ae:	bf08      	it	eq
 80039b0:	68ec      	ldreq	r4, [r5, #12]
 80039b2:	e7d5      	b.n	8003960 <_puts_r+0x24>
 80039b4:	4621      	mov	r1, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f8ac 	bl	8003b14 <__swsetup_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d0dd      	beq.n	800397c <_puts_r+0x40>
 80039c0:	f04f 35ff 	mov.w	r5, #4294967295
 80039c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c6:	07da      	lsls	r2, r3, #31
 80039c8:	d405      	bmi.n	80039d6 <_puts_r+0x9a>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	059b      	lsls	r3, r3, #22
 80039ce:	d402      	bmi.n	80039d6 <_puts_r+0x9a>
 80039d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d2:	f000 fac2 	bl	8003f5a <__retarget_lock_release_recursive>
 80039d6:	4628      	mov	r0, r5
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da04      	bge.n	80039e8 <_puts_r+0xac>
 80039de:	69a2      	ldr	r2, [r4, #24]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dc06      	bgt.n	80039f2 <_puts_r+0xb6>
 80039e4:	290a      	cmp	r1, #10
 80039e6:	d004      	beq.n	80039f2 <_puts_r+0xb6>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	6022      	str	r2, [r4, #0]
 80039ee:	7019      	strb	r1, [r3, #0]
 80039f0:	e7c5      	b.n	800397e <_puts_r+0x42>
 80039f2:	4622      	mov	r2, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 f83b 	bl	8003a70 <__swbuf_r>
 80039fa:	3001      	adds	r0, #1
 80039fc:	d1bf      	bne.n	800397e <_puts_r+0x42>
 80039fe:	e7df      	b.n	80039c0 <_puts_r+0x84>
 8003a00:	250a      	movs	r5, #10
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	6022      	str	r2, [r4, #0]
 8003a08:	701d      	strb	r5, [r3, #0]
 8003a0a:	e7db      	b.n	80039c4 <_puts_r+0x88>
 8003a0c:	08004ad4 	.word	0x08004ad4
 8003a10:	08004af4 	.word	0x08004af4
 8003a14:	08004ab4 	.word	0x08004ab4

08003a18 <puts>:
 8003a18:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <puts+0xc>)
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f7ff bf8d 	b.w	800393c <_puts_r>
 8003a22:	bf00      	nop
 8003a24:	2000000c 	.word	0x2000000c

08003a28 <strchr>:
 8003a28:	4603      	mov	r3, r0
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a32:	b112      	cbz	r2, 8003a3a <strchr+0x12>
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d1f9      	bne.n	8003a2c <strchr+0x4>
 8003a38:	4770      	bx	lr
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	bf18      	it	ne
 8003a3e:	2000      	movne	r0, #0
 8003a40:	4770      	bx	lr

08003a42 <strstr>:
 8003a42:	780a      	ldrb	r2, [r1, #0]
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	b96a      	cbnz	r2, 8003a64 <strstr+0x22>
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d109      	bne.n	8003a62 <strstr+0x20>
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4605      	mov	r5, r0
 8003a52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f6      	beq.n	8003a48 <strstr+0x6>
 8003a5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003a5e:	429e      	cmp	r6, r3
 8003a60:	d0f7      	beq.n	8003a52 <strstr+0x10>
 8003a62:	3001      	adds	r0, #1
 8003a64:	7803      	ldrb	r3, [r0, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ef      	bne.n	8003a4a <strstr+0x8>
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	e7ec      	b.n	8003a48 <strstr+0x6>
	...

08003a70 <__swbuf_r>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	4605      	mov	r5, r0
 8003a78:	b118      	cbz	r0, 8003a82 <__swbuf_r+0x12>
 8003a7a:	6983      	ldr	r3, [r0, #24]
 8003a7c:	b90b      	cbnz	r3, 8003a82 <__swbuf_r+0x12>
 8003a7e:	f000 f9cd 	bl	8003e1c <__sinit>
 8003a82:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <__swbuf_r+0x98>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d12b      	bne.n	8003ae0 <__swbuf_r+0x70>
 8003a88:	686c      	ldr	r4, [r5, #4]
 8003a8a:	69a3      	ldr	r3, [r4, #24]
 8003a8c:	60a3      	str	r3, [r4, #8]
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	071a      	lsls	r2, r3, #28
 8003a92:	d52f      	bpl.n	8003af4 <__swbuf_r+0x84>
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	b36b      	cbz	r3, 8003af4 <__swbuf_r+0x84>
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	b2f6      	uxtb	r6, r6
 8003a9e:	1ac0      	subs	r0, r0, r3
 8003aa0:	6963      	ldr	r3, [r4, #20]
 8003aa2:	4637      	mov	r7, r6
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	dc04      	bgt.n	8003ab2 <__swbuf_r+0x42>
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 f922 	bl	8003cf4 <_fflush_r>
 8003ab0:	bb30      	cbnz	r0, 8003b00 <__swbuf_r+0x90>
 8003ab2:	68a3      	ldr	r3, [r4, #8]
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	6022      	str	r2, [r4, #0]
 8003ac0:	701e      	strb	r6, [r3, #0]
 8003ac2:	6963      	ldr	r3, [r4, #20]
 8003ac4:	4283      	cmp	r3, r0
 8003ac6:	d004      	beq.n	8003ad2 <__swbuf_r+0x62>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	07db      	lsls	r3, r3, #31
 8003acc:	d506      	bpl.n	8003adc <__swbuf_r+0x6c>
 8003ace:	2e0a      	cmp	r6, #10
 8003ad0:	d104      	bne.n	8003adc <__swbuf_r+0x6c>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f90d 	bl	8003cf4 <_fflush_r>
 8003ada:	b988      	cbnz	r0, 8003b00 <__swbuf_r+0x90>
 8003adc:	4638      	mov	r0, r7
 8003ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <__swbuf_r+0x9c>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d101      	bne.n	8003aea <__swbuf_r+0x7a>
 8003ae6:	68ac      	ldr	r4, [r5, #8]
 8003ae8:	e7cf      	b.n	8003a8a <__swbuf_r+0x1a>
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <__swbuf_r+0xa0>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	bf08      	it	eq
 8003af0:	68ec      	ldreq	r4, [r5, #12]
 8003af2:	e7ca      	b.n	8003a8a <__swbuf_r+0x1a>
 8003af4:	4621      	mov	r1, r4
 8003af6:	4628      	mov	r0, r5
 8003af8:	f000 f80c 	bl	8003b14 <__swsetup_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d0cb      	beq.n	8003a98 <__swbuf_r+0x28>
 8003b00:	f04f 37ff 	mov.w	r7, #4294967295
 8003b04:	e7ea      	b.n	8003adc <__swbuf_r+0x6c>
 8003b06:	bf00      	nop
 8003b08:	08004ad4 	.word	0x08004ad4
 8003b0c:	08004af4 	.word	0x08004af4
 8003b10:	08004ab4 	.word	0x08004ab4

08003b14 <__swsetup_r>:
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <__swsetup_r+0xcc>)
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	681d      	ldr	r5, [r3, #0]
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b125      	cbz	r5, 8003b2a <__swsetup_r+0x16>
 8003b20:	69ab      	ldr	r3, [r5, #24]
 8003b22:	b913      	cbnz	r3, 8003b2a <__swsetup_r+0x16>
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 f979 	bl	8003e1c <__sinit>
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <__swsetup_r+0xd0>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	d10f      	bne.n	8003b50 <__swsetup_r+0x3c>
 8003b30:	686c      	ldr	r4, [r5, #4]
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b38:	0719      	lsls	r1, r3, #28
 8003b3a:	d42c      	bmi.n	8003b96 <__swsetup_r+0x82>
 8003b3c:	06dd      	lsls	r5, r3, #27
 8003b3e:	d411      	bmi.n	8003b64 <__swsetup_r+0x50>
 8003b40:	2309      	movs	r3, #9
 8003b42:	6033      	str	r3, [r6, #0]
 8003b44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	e03e      	b.n	8003bce <__swsetup_r+0xba>
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <__swsetup_r+0xd4>)
 8003b52:	429c      	cmp	r4, r3
 8003b54:	d101      	bne.n	8003b5a <__swsetup_r+0x46>
 8003b56:	68ac      	ldr	r4, [r5, #8]
 8003b58:	e7eb      	b.n	8003b32 <__swsetup_r+0x1e>
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <__swsetup_r+0xd8>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	bf08      	it	eq
 8003b60:	68ec      	ldreq	r4, [r5, #12]
 8003b62:	e7e6      	b.n	8003b32 <__swsetup_r+0x1e>
 8003b64:	0758      	lsls	r0, r3, #29
 8003b66:	d512      	bpl.n	8003b8e <__swsetup_r+0x7a>
 8003b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6a:	b141      	cbz	r1, 8003b7e <__swsetup_r+0x6a>
 8003b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d002      	beq.n	8003b7a <__swsetup_r+0x66>
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 fa57 	bl	8004028 <_free_r>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	2300      	movs	r3, #0
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	b94b      	cbnz	r3, 8003bae <__swsetup_r+0x9a>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d003      	beq.n	8003bae <__swsetup_r+0x9a>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f000 f9fd 	bl	8003fa8 <__smakebuf_r>
 8003bae:	89a0      	ldrh	r0, [r4, #12]
 8003bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bb4:	f010 0301 	ands.w	r3, r0, #1
 8003bb8:	d00a      	beq.n	8003bd0 <__swsetup_r+0xbc>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	425b      	negs	r3, r3
 8003bc2:	61a3      	str	r3, [r4, #24]
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	b943      	cbnz	r3, 8003bda <__swsetup_r+0xc6>
 8003bc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bcc:	d1ba      	bne.n	8003b44 <__swsetup_r+0x30>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	0781      	lsls	r1, r0, #30
 8003bd2:	bf58      	it	pl
 8003bd4:	6963      	ldrpl	r3, [r4, #20]
 8003bd6:	60a3      	str	r3, [r4, #8]
 8003bd8:	e7f4      	b.n	8003bc4 <__swsetup_r+0xb0>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e7f7      	b.n	8003bce <__swsetup_r+0xba>
 8003bde:	bf00      	nop
 8003be0:	2000000c 	.word	0x2000000c
 8003be4:	08004ad4 	.word	0x08004ad4
 8003be8:	08004af4 	.word	0x08004af4
 8003bec:	08004ab4 	.word	0x08004ab4

08003bf0 <__sflush_r>:
 8003bf0:	898a      	ldrh	r2, [r1, #12]
 8003bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	0710      	lsls	r0, r2, #28
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	d457      	bmi.n	8003cac <__sflush_r+0xbc>
 8003bfc:	684b      	ldr	r3, [r1, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	dc04      	bgt.n	8003c0c <__sflush_r+0x1c>
 8003c02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dc01      	bgt.n	8003c0c <__sflush_r+0x1c>
 8003c08:	2000      	movs	r0, #0
 8003c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	d0fa      	beq.n	8003c08 <__sflush_r+0x18>
 8003c12:	2300      	movs	r3, #0
 8003c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c18:	682f      	ldr	r7, [r5, #0]
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	d032      	beq.n	8003c84 <__sflush_r+0x94>
 8003c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	075a      	lsls	r2, r3, #29
 8003c24:	d505      	bpl.n	8003c32 <__sflush_r+0x42>
 8003c26:	6863      	ldr	r3, [r4, #4]
 8003c28:	1ac0      	subs	r0, r0, r3
 8003c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c2c:	b10b      	cbz	r3, 8003c32 <__sflush_r+0x42>
 8003c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c30:	1ac0      	subs	r0, r0, r3
 8003c32:	2300      	movs	r3, #0
 8003c34:	4602      	mov	r2, r0
 8003c36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c38:	4628      	mov	r0, r5
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	47b0      	blx	r6
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	d106      	bne.n	8003c52 <__sflush_r+0x62>
 8003c44:	6829      	ldr	r1, [r5, #0]
 8003c46:	291d      	cmp	r1, #29
 8003c48:	d82c      	bhi.n	8003ca4 <__sflush_r+0xb4>
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <__sflush_r+0x100>)
 8003c4c:	40ca      	lsrs	r2, r1
 8003c4e:	07d6      	lsls	r6, r2, #31
 8003c50:	d528      	bpl.n	8003ca4 <__sflush_r+0xb4>
 8003c52:	2200      	movs	r2, #0
 8003c54:	6062      	str	r2, [r4, #4]
 8003c56:	6922      	ldr	r2, [r4, #16]
 8003c58:	04d9      	lsls	r1, r3, #19
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	d504      	bpl.n	8003c68 <__sflush_r+0x78>
 8003c5e:	1c42      	adds	r2, r0, #1
 8003c60:	d101      	bne.n	8003c66 <__sflush_r+0x76>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	b903      	cbnz	r3, 8003c68 <__sflush_r+0x78>
 8003c66:	6560      	str	r0, [r4, #84]	; 0x54
 8003c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c6a:	602f      	str	r7, [r5, #0]
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d0cb      	beq.n	8003c08 <__sflush_r+0x18>
 8003c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c74:	4299      	cmp	r1, r3
 8003c76:	d002      	beq.n	8003c7e <__sflush_r+0x8e>
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 f9d5 	bl	8004028 <_free_r>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	6360      	str	r0, [r4, #52]	; 0x34
 8003c82:	e7c2      	b.n	8003c0a <__sflush_r+0x1a>
 8003c84:	6a21      	ldr	r1, [r4, #32]
 8003c86:	2301      	movs	r3, #1
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b0      	blx	r6
 8003c8c:	1c41      	adds	r1, r0, #1
 8003c8e:	d1c7      	bne.n	8003c20 <__sflush_r+0x30>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0c4      	beq.n	8003c20 <__sflush_r+0x30>
 8003c96:	2b1d      	cmp	r3, #29
 8003c98:	d001      	beq.n	8003c9e <__sflush_r+0xae>
 8003c9a:	2b16      	cmp	r3, #22
 8003c9c:	d101      	bne.n	8003ca2 <__sflush_r+0xb2>
 8003c9e:	602f      	str	r7, [r5, #0]
 8003ca0:	e7b2      	b.n	8003c08 <__sflush_r+0x18>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	e7ae      	b.n	8003c0a <__sflush_r+0x1a>
 8003cac:	690f      	ldr	r7, [r1, #16]
 8003cae:	2f00      	cmp	r7, #0
 8003cb0:	d0aa      	beq.n	8003c08 <__sflush_r+0x18>
 8003cb2:	0793      	lsls	r3, r2, #30
 8003cb4:	bf18      	it	ne
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	680e      	ldr	r6, [r1, #0]
 8003cba:	bf08      	it	eq
 8003cbc:	694b      	ldreq	r3, [r1, #20]
 8003cbe:	1bf6      	subs	r6, r6, r7
 8003cc0:	600f      	str	r7, [r1, #0]
 8003cc2:	608b      	str	r3, [r1, #8]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	dd9f      	ble.n	8003c08 <__sflush_r+0x18>
 8003cc8:	4633      	mov	r3, r6
 8003cca:	463a      	mov	r2, r7
 8003ccc:	4628      	mov	r0, r5
 8003cce:	6a21      	ldr	r1, [r4, #32]
 8003cd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003cd4:	47e0      	blx	ip
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	dc06      	bgt.n	8003ce8 <__sflush_r+0xf8>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	e790      	b.n	8003c0a <__sflush_r+0x1a>
 8003ce8:	4407      	add	r7, r0
 8003cea:	1a36      	subs	r6, r6, r0
 8003cec:	e7ea      	b.n	8003cc4 <__sflush_r+0xd4>
 8003cee:	bf00      	nop
 8003cf0:	20400001 	.word	0x20400001

08003cf4 <_fflush_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	690b      	ldr	r3, [r1, #16]
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	b913      	cbnz	r3, 8003d04 <_fflush_r+0x10>
 8003cfe:	2500      	movs	r5, #0
 8003d00:	4628      	mov	r0, r5
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	b118      	cbz	r0, 8003d0e <_fflush_r+0x1a>
 8003d06:	6983      	ldr	r3, [r0, #24]
 8003d08:	b90b      	cbnz	r3, 8003d0e <_fflush_r+0x1a>
 8003d0a:	f000 f887 	bl	8003e1c <__sinit>
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <_fflush_r+0x6c>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d11b      	bne.n	8003d4c <_fflush_r+0x58>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ef      	beq.n	8003cfe <_fflush_r+0xa>
 8003d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d20:	07d0      	lsls	r0, r2, #31
 8003d22:	d404      	bmi.n	8003d2e <_fflush_r+0x3a>
 8003d24:	0599      	lsls	r1, r3, #22
 8003d26:	d402      	bmi.n	8003d2e <_fflush_r+0x3a>
 8003d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d2a:	f000 f915 	bl	8003f58 <__retarget_lock_acquire_recursive>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	4621      	mov	r1, r4
 8003d32:	f7ff ff5d 	bl	8003bf0 <__sflush_r>
 8003d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d38:	4605      	mov	r5, r0
 8003d3a:	07da      	lsls	r2, r3, #31
 8003d3c:	d4e0      	bmi.n	8003d00 <_fflush_r+0xc>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	059b      	lsls	r3, r3, #22
 8003d42:	d4dd      	bmi.n	8003d00 <_fflush_r+0xc>
 8003d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d46:	f000 f908 	bl	8003f5a <__retarget_lock_release_recursive>
 8003d4a:	e7d9      	b.n	8003d00 <_fflush_r+0xc>
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <_fflush_r+0x70>)
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	d101      	bne.n	8003d56 <_fflush_r+0x62>
 8003d52:	68ac      	ldr	r4, [r5, #8]
 8003d54:	e7df      	b.n	8003d16 <_fflush_r+0x22>
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <_fflush_r+0x74>)
 8003d58:	429c      	cmp	r4, r3
 8003d5a:	bf08      	it	eq
 8003d5c:	68ec      	ldreq	r4, [r5, #12]
 8003d5e:	e7da      	b.n	8003d16 <_fflush_r+0x22>
 8003d60:	08004ad4 	.word	0x08004ad4
 8003d64:	08004af4 	.word	0x08004af4
 8003d68:	08004ab4 	.word	0x08004ab4

08003d6c <std>:
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
 8003d72:	e9c0 3300 	strd	r3, r3, [r0]
 8003d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d7a:	6083      	str	r3, [r0, #8]
 8003d7c:	8181      	strh	r1, [r0, #12]
 8003d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d80:	81c2      	strh	r2, [r0, #14]
 8003d82:	6183      	str	r3, [r0, #24]
 8003d84:	4619      	mov	r1, r3
 8003d86:	2208      	movs	r2, #8
 8003d88:	305c      	adds	r0, #92	; 0x5c
 8003d8a:	f7ff fdb7 	bl	80038fc <memset>
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <std+0x38>)
 8003d90:	6224      	str	r4, [r4, #32]
 8003d92:	6263      	str	r3, [r4, #36]	; 0x24
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <std+0x3c>)
 8003d96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <std+0x40>)
 8003d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <std+0x44>)
 8003d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	080047dd 	.word	0x080047dd
 8003da8:	080047ff 	.word	0x080047ff
 8003dac:	08004837 	.word	0x08004837
 8003db0:	0800485b 	.word	0x0800485b

08003db4 <_cleanup_r>:
 8003db4:	4901      	ldr	r1, [pc, #4]	; (8003dbc <_cleanup_r+0x8>)
 8003db6:	f000 b8af 	b.w	8003f18 <_fwalk_reent>
 8003dba:	bf00      	nop
 8003dbc:	08003cf5 	.word	0x08003cf5

08003dc0 <__sfmoreglue>:
 8003dc0:	2268      	movs	r2, #104	; 0x68
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	1e4d      	subs	r5, r1, #1
 8003dc6:	4355      	muls	r5, r2
 8003dc8:	460e      	mov	r6, r1
 8003dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dce:	f000 f993 	bl	80040f8 <_malloc_r>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	b140      	cbz	r0, 8003de8 <__sfmoreglue+0x28>
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8003ddc:	300c      	adds	r0, #12
 8003dde:	60a0      	str	r0, [r4, #8]
 8003de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003de4:	f7ff fd8a 	bl	80038fc <memset>
 8003de8:	4620      	mov	r0, r4
 8003dea:	bd70      	pop	{r4, r5, r6, pc}

08003dec <__sfp_lock_acquire>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__sfp_lock_acquire+0x8>)
 8003dee:	f000 b8b3 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	200001d9 	.word	0x200001d9

08003df8 <__sfp_lock_release>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__sfp_lock_release+0x8>)
 8003dfa:	f000 b8ae 	b.w	8003f5a <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200001d9 	.word	0x200001d9

08003e04 <__sinit_lock_acquire>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__sinit_lock_acquire+0x8>)
 8003e06:	f000 b8a7 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200001da 	.word	0x200001da

08003e10 <__sinit_lock_release>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__sinit_lock_release+0x8>)
 8003e12:	f000 b8a2 	b.w	8003f5a <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	200001da 	.word	0x200001da

08003e1c <__sinit>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	f7ff fff0 	bl	8003e04 <__sinit_lock_acquire>
 8003e24:	69a3      	ldr	r3, [r4, #24]
 8003e26:	b11b      	cbz	r3, 8003e30 <__sinit+0x14>
 8003e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e2c:	f7ff bff0 	b.w	8003e10 <__sinit_lock_release>
 8003e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e34:	6523      	str	r3, [r4, #80]	; 0x50
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <__sinit+0x68>)
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <__sinit+0x6c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	bf08      	it	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	4620      	mov	r0, r4
 8003e46:	bf08      	it	eq
 8003e48:	61a3      	streq	r3, [r4, #24]
 8003e4a:	f000 f81f 	bl	8003e8c <__sfp>
 8003e4e:	6060      	str	r0, [r4, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 f81b 	bl	8003e8c <__sfp>
 8003e56:	60a0      	str	r0, [r4, #8]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f817 	bl	8003e8c <__sfp>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2104      	movs	r1, #4
 8003e62:	60e0      	str	r0, [r4, #12]
 8003e64:	6860      	ldr	r0, [r4, #4]
 8003e66:	f7ff ff81 	bl	8003d6c <std>
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2109      	movs	r1, #9
 8003e6e:	68a0      	ldr	r0, [r4, #8]
 8003e70:	f7ff ff7c 	bl	8003d6c <std>
 8003e74:	2202      	movs	r2, #2
 8003e76:	2112      	movs	r1, #18
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	f7ff ff77 	bl	8003d6c <std>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61a3      	str	r3, [r4, #24]
 8003e82:	e7d1      	b.n	8003e28 <__sinit+0xc>
 8003e84:	08004ab0 	.word	0x08004ab0
 8003e88:	08003db5 	.word	0x08003db5

08003e8c <__sfp>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	4607      	mov	r7, r0
 8003e90:	f7ff ffac 	bl	8003dec <__sfp_lock_acquire>
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <__sfp+0x84>)
 8003e96:	681e      	ldr	r6, [r3, #0]
 8003e98:	69b3      	ldr	r3, [r6, #24]
 8003e9a:	b913      	cbnz	r3, 8003ea2 <__sfp+0x16>
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffbd 	bl	8003e1c <__sinit>
 8003ea2:	3648      	adds	r6, #72	; 0x48
 8003ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	d503      	bpl.n	8003eb4 <__sfp+0x28>
 8003eac:	6833      	ldr	r3, [r6, #0]
 8003eae:	b30b      	cbz	r3, 8003ef4 <__sfp+0x68>
 8003eb0:	6836      	ldr	r6, [r6, #0]
 8003eb2:	e7f7      	b.n	8003ea4 <__sfp+0x18>
 8003eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003eb8:	b9d5      	cbnz	r5, 8003ef0 <__sfp+0x64>
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <__sfp+0x88>)
 8003ebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ec0:	60e3      	str	r3, [r4, #12]
 8003ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8003ec4:	f000 f847 	bl	8003f56 <__retarget_lock_init_recursive>
 8003ec8:	f7ff ff96 	bl	8003df8 <__sfp_lock_release>
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4629      	mov	r1, r5
 8003ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ed8:	6025      	str	r5, [r4, #0]
 8003eda:	61a5      	str	r5, [r4, #24]
 8003edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ee0:	f7ff fd0c 	bl	80038fc <memset>
 8003ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003eec:	4620      	mov	r0, r4
 8003eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef0:	3468      	adds	r4, #104	; 0x68
 8003ef2:	e7d9      	b.n	8003ea8 <__sfp+0x1c>
 8003ef4:	2104      	movs	r1, #4
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f7ff ff62 	bl	8003dc0 <__sfmoreglue>
 8003efc:	4604      	mov	r4, r0
 8003efe:	6030      	str	r0, [r6, #0]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d1d5      	bne.n	8003eb0 <__sfp+0x24>
 8003f04:	f7ff ff78 	bl	8003df8 <__sfp_lock_release>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	e7ee      	b.n	8003eec <__sfp+0x60>
 8003f0e:	bf00      	nop
 8003f10:	08004ab0 	.word	0x08004ab0
 8003f14:	ffff0001 	.word	0xffff0001

08003f18 <_fwalk_reent>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	4688      	mov	r8, r1
 8003f20:	2700      	movs	r7, #0
 8003f22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8003f2e:	d505      	bpl.n	8003f3c <_fwalk_reent+0x24>
 8003f30:	6824      	ldr	r4, [r4, #0]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d1f7      	bne.n	8003f26 <_fwalk_reent+0xe>
 8003f36:	4638      	mov	r0, r7
 8003f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3c:	89ab      	ldrh	r3, [r5, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d907      	bls.n	8003f52 <_fwalk_reent+0x3a>
 8003f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f46:	3301      	adds	r3, #1
 8003f48:	d003      	beq.n	8003f52 <_fwalk_reent+0x3a>
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	47c0      	blx	r8
 8003f50:	4307      	orrs	r7, r0
 8003f52:	3568      	adds	r5, #104	; 0x68
 8003f54:	e7e9      	b.n	8003f2a <_fwalk_reent+0x12>

08003f56 <__retarget_lock_init_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <__retarget_lock_acquire_recursive>:
 8003f58:	4770      	bx	lr

08003f5a <__retarget_lock_release_recursive>:
 8003f5a:	4770      	bx	lr

08003f5c <__swhatbuf_r>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	460e      	mov	r6, r1
 8003f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f64:	4614      	mov	r4, r2
 8003f66:	2900      	cmp	r1, #0
 8003f68:	461d      	mov	r5, r3
 8003f6a:	b096      	sub	sp, #88	; 0x58
 8003f6c:	da08      	bge.n	8003f80 <__swhatbuf_r+0x24>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f74:	602a      	str	r2, [r5, #0]
 8003f76:	061a      	lsls	r2, r3, #24
 8003f78:	d410      	bmi.n	8003f9c <__swhatbuf_r+0x40>
 8003f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7e:	e00e      	b.n	8003f9e <__swhatbuf_r+0x42>
 8003f80:	466a      	mov	r2, sp
 8003f82:	f000 fc91 	bl	80048a8 <_fstat_r>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	dbf1      	blt.n	8003f6e <__swhatbuf_r+0x12>
 8003f8a:	9a01      	ldr	r2, [sp, #4]
 8003f8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f94:	425a      	negs	r2, r3
 8003f96:	415a      	adcs	r2, r3
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	e7ee      	b.n	8003f7a <__swhatbuf_r+0x1e>
 8003f9c:	2340      	movs	r3, #64	; 0x40
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	b016      	add	sp, #88	; 0x58
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fa8 <__smakebuf_r>:
 8003fa8:	898b      	ldrh	r3, [r1, #12]
 8003faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fac:	079d      	lsls	r5, r3, #30
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	d507      	bpl.n	8003fc4 <__smakebuf_r+0x1c>
 8003fb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	6123      	str	r3, [r4, #16]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	6163      	str	r3, [r4, #20]
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	466a      	mov	r2, sp
 8003fc6:	ab01      	add	r3, sp, #4
 8003fc8:	f7ff ffc8 	bl	8003f5c <__swhatbuf_r>
 8003fcc:	9900      	ldr	r1, [sp, #0]
 8003fce:	4605      	mov	r5, r0
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f891 	bl	80040f8 <_malloc_r>
 8003fd6:	b948      	cbnz	r0, 8003fec <__smakebuf_r+0x44>
 8003fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fdc:	059a      	lsls	r2, r3, #22
 8003fde:	d4ef      	bmi.n	8003fc0 <__smakebuf_r+0x18>
 8003fe0:	f023 0303 	bic.w	r3, r3, #3
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	e7e3      	b.n	8003fb4 <__smakebuf_r+0xc>
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <__smakebuf_r+0x7c>)
 8003fee:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	6020      	str	r0, [r4, #0]
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	9b00      	ldr	r3, [sp, #0]
 8003ffc:	6120      	str	r0, [r4, #16]
 8003ffe:	6163      	str	r3, [r4, #20]
 8004000:	9b01      	ldr	r3, [sp, #4]
 8004002:	b15b      	cbz	r3, 800401c <__smakebuf_r+0x74>
 8004004:	4630      	mov	r0, r6
 8004006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400a:	f000 fc5f 	bl	80048cc <_isatty_r>
 800400e:	b128      	cbz	r0, 800401c <__smakebuf_r+0x74>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	89a0      	ldrh	r0, [r4, #12]
 800401e:	4305      	orrs	r5, r0
 8004020:	81a5      	strh	r5, [r4, #12]
 8004022:	e7cd      	b.n	8003fc0 <__smakebuf_r+0x18>
 8004024:	08003db5 	.word	0x08003db5

08004028 <_free_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4605      	mov	r5, r0
 800402c:	2900      	cmp	r1, #0
 800402e:	d040      	beq.n	80040b2 <_free_r+0x8a>
 8004030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004034:	1f0c      	subs	r4, r1, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	bfb8      	it	lt
 800403a:	18e4      	addlt	r4, r4, r3
 800403c:	f000 fc76 	bl	800492c <__malloc_lock>
 8004040:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <_free_r+0x8c>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b933      	cbnz	r3, 8004054 <_free_r+0x2c>
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6014      	str	r4, [r2, #0]
 800404a:	4628      	mov	r0, r5
 800404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004050:	f000 bc72 	b.w	8004938 <__malloc_unlock>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x42>
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	1821      	adds	r1, r4, r0
 800405c:	428b      	cmp	r3, r1
 800405e:	bf01      	itttt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	1809      	addeq	r1, r1, r0
 8004066:	6021      	streq	r1, [r4, #0]
 8004068:	e7ed      	b.n	8004046 <_free_r+0x1e>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x4c>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x42>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1850      	adds	r0, r2, r1
 8004078:	42a0      	cmp	r0, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x6c>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	4401      	add	r1, r0
 8004080:	1850      	adds	r0, r2, r1
 8004082:	4283      	cmp	r3, r0
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1e0      	bne.n	800404a <_free_r+0x22>
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4401      	add	r1, r0
 800408e:	6011      	str	r1, [r2, #0]
 8004090:	6053      	str	r3, [r2, #4]
 8004092:	e7da      	b.n	800404a <_free_r+0x22>
 8004094:	d902      	bls.n	800409c <_free_r+0x74>
 8004096:	230c      	movs	r3, #12
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	e7d6      	b.n	800404a <_free_r+0x22>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1809      	addeq	r1, r1, r0
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	6054      	str	r4, [r2, #4]
 80040b0:	e7cb      	b.n	800404a <_free_r+0x22>
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	200001dc 	.word	0x200001dc

080040b8 <sbrk_aligned>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4e0e      	ldr	r6, [pc, #56]	; (80040f4 <sbrk_aligned+0x3c>)
 80040bc:	460c      	mov	r4, r1
 80040be:	6831      	ldr	r1, [r6, #0]
 80040c0:	4605      	mov	r5, r0
 80040c2:	b911      	cbnz	r1, 80040ca <sbrk_aligned+0x12>
 80040c4:	f000 fb7a 	bl	80047bc <_sbrk_r>
 80040c8:	6030      	str	r0, [r6, #0]
 80040ca:	4621      	mov	r1, r4
 80040cc:	4628      	mov	r0, r5
 80040ce:	f000 fb75 	bl	80047bc <_sbrk_r>
 80040d2:	1c43      	adds	r3, r0, #1
 80040d4:	d00a      	beq.n	80040ec <sbrk_aligned+0x34>
 80040d6:	1cc4      	adds	r4, r0, #3
 80040d8:	f024 0403 	bic.w	r4, r4, #3
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d007      	beq.n	80040f0 <sbrk_aligned+0x38>
 80040e0:	1a21      	subs	r1, r4, r0
 80040e2:	4628      	mov	r0, r5
 80040e4:	f000 fb6a 	bl	80047bc <_sbrk_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d101      	bne.n	80040f0 <sbrk_aligned+0x38>
 80040ec:	f04f 34ff 	mov.w	r4, #4294967295
 80040f0:	4620      	mov	r0, r4
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	200001e0 	.word	0x200001e0

080040f8 <_malloc_r>:
 80040f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fc:	1ccd      	adds	r5, r1, #3
 80040fe:	f025 0503 	bic.w	r5, r5, #3
 8004102:	3508      	adds	r5, #8
 8004104:	2d0c      	cmp	r5, #12
 8004106:	bf38      	it	cc
 8004108:	250c      	movcc	r5, #12
 800410a:	2d00      	cmp	r5, #0
 800410c:	4607      	mov	r7, r0
 800410e:	db01      	blt.n	8004114 <_malloc_r+0x1c>
 8004110:	42a9      	cmp	r1, r5
 8004112:	d905      	bls.n	8004120 <_malloc_r+0x28>
 8004114:	230c      	movs	r3, #12
 8004116:	2600      	movs	r6, #0
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	4630      	mov	r0, r6
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004120:	4e2e      	ldr	r6, [pc, #184]	; (80041dc <_malloc_r+0xe4>)
 8004122:	f000 fc03 	bl	800492c <__malloc_lock>
 8004126:	6833      	ldr	r3, [r6, #0]
 8004128:	461c      	mov	r4, r3
 800412a:	bb34      	cbnz	r4, 800417a <_malloc_r+0x82>
 800412c:	4629      	mov	r1, r5
 800412e:	4638      	mov	r0, r7
 8004130:	f7ff ffc2 	bl	80040b8 <sbrk_aligned>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	4604      	mov	r4, r0
 8004138:	d14d      	bne.n	80041d6 <_malloc_r+0xde>
 800413a:	6834      	ldr	r4, [r6, #0]
 800413c:	4626      	mov	r6, r4
 800413e:	2e00      	cmp	r6, #0
 8004140:	d140      	bne.n	80041c4 <_malloc_r+0xcc>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	4631      	mov	r1, r6
 8004146:	4638      	mov	r0, r7
 8004148:	eb04 0803 	add.w	r8, r4, r3
 800414c:	f000 fb36 	bl	80047bc <_sbrk_r>
 8004150:	4580      	cmp	r8, r0
 8004152:	d13a      	bne.n	80041ca <_malloc_r+0xd2>
 8004154:	6821      	ldr	r1, [r4, #0]
 8004156:	3503      	adds	r5, #3
 8004158:	1a6d      	subs	r5, r5, r1
 800415a:	f025 0503 	bic.w	r5, r5, #3
 800415e:	3508      	adds	r5, #8
 8004160:	2d0c      	cmp	r5, #12
 8004162:	bf38      	it	cc
 8004164:	250c      	movcc	r5, #12
 8004166:	4638      	mov	r0, r7
 8004168:	4629      	mov	r1, r5
 800416a:	f7ff ffa5 	bl	80040b8 <sbrk_aligned>
 800416e:	3001      	adds	r0, #1
 8004170:	d02b      	beq.n	80041ca <_malloc_r+0xd2>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	442b      	add	r3, r5
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	e00e      	b.n	8004198 <_malloc_r+0xa0>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	1b52      	subs	r2, r2, r5
 800417e:	d41e      	bmi.n	80041be <_malloc_r+0xc6>
 8004180:	2a0b      	cmp	r2, #11
 8004182:	d916      	bls.n	80041b2 <_malloc_r+0xba>
 8004184:	1961      	adds	r1, r4, r5
 8004186:	42a3      	cmp	r3, r4
 8004188:	6025      	str	r5, [r4, #0]
 800418a:	bf18      	it	ne
 800418c:	6059      	strne	r1, [r3, #4]
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	bf08      	it	eq
 8004192:	6031      	streq	r1, [r6, #0]
 8004194:	5162      	str	r2, [r4, r5]
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	4638      	mov	r0, r7
 800419a:	f104 060b 	add.w	r6, r4, #11
 800419e:	f000 fbcb 	bl	8004938 <__malloc_unlock>
 80041a2:	f026 0607 	bic.w	r6, r6, #7
 80041a6:	1d23      	adds	r3, r4, #4
 80041a8:	1af2      	subs	r2, r6, r3
 80041aa:	d0b6      	beq.n	800411a <_malloc_r+0x22>
 80041ac:	1b9b      	subs	r3, r3, r6
 80041ae:	50a3      	str	r3, [r4, r2]
 80041b0:	e7b3      	b.n	800411a <_malloc_r+0x22>
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	bf0c      	ite	eq
 80041b8:	6032      	streq	r2, [r6, #0]
 80041ba:	605a      	strne	r2, [r3, #4]
 80041bc:	e7ec      	b.n	8004198 <_malloc_r+0xa0>
 80041be:	4623      	mov	r3, r4
 80041c0:	6864      	ldr	r4, [r4, #4]
 80041c2:	e7b2      	b.n	800412a <_malloc_r+0x32>
 80041c4:	4634      	mov	r4, r6
 80041c6:	6876      	ldr	r6, [r6, #4]
 80041c8:	e7b9      	b.n	800413e <_malloc_r+0x46>
 80041ca:	230c      	movs	r3, #12
 80041cc:	4638      	mov	r0, r7
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	f000 fbb2 	bl	8004938 <__malloc_unlock>
 80041d4:	e7a1      	b.n	800411a <_malloc_r+0x22>
 80041d6:	6025      	str	r5, [r4, #0]
 80041d8:	e7de      	b.n	8004198 <_malloc_r+0xa0>
 80041da:	bf00      	nop
 80041dc:	200001dc 	.word	0x200001dc

080041e0 <__sfputc_r>:
 80041e0:	6893      	ldr	r3, [r2, #8]
 80041e2:	b410      	push	{r4}
 80041e4:	3b01      	subs	r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	6093      	str	r3, [r2, #8]
 80041ea:	da07      	bge.n	80041fc <__sfputc_r+0x1c>
 80041ec:	6994      	ldr	r4, [r2, #24]
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	db01      	blt.n	80041f6 <__sfputc_r+0x16>
 80041f2:	290a      	cmp	r1, #10
 80041f4:	d102      	bne.n	80041fc <__sfputc_r+0x1c>
 80041f6:	bc10      	pop	{r4}
 80041f8:	f7ff bc3a 	b.w	8003a70 <__swbuf_r>
 80041fc:	6813      	ldr	r3, [r2, #0]
 80041fe:	1c58      	adds	r0, r3, #1
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	7019      	strb	r1, [r3, #0]
 8004204:	4608      	mov	r0, r1
 8004206:	bc10      	pop	{r4}
 8004208:	4770      	bx	lr

0800420a <__sfputs_r>:
 800420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420c:	4606      	mov	r6, r0
 800420e:	460f      	mov	r7, r1
 8004210:	4614      	mov	r4, r2
 8004212:	18d5      	adds	r5, r2, r3
 8004214:	42ac      	cmp	r4, r5
 8004216:	d101      	bne.n	800421c <__sfputs_r+0x12>
 8004218:	2000      	movs	r0, #0
 800421a:	e007      	b.n	800422c <__sfputs_r+0x22>
 800421c:	463a      	mov	r2, r7
 800421e:	4630      	mov	r0, r6
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	f7ff ffdc 	bl	80041e0 <__sfputc_r>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d1f3      	bne.n	8004214 <__sfputs_r+0xa>
 800422c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004230 <_vfiprintf_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	460d      	mov	r5, r1
 8004236:	4614      	mov	r4, r2
 8004238:	4698      	mov	r8, r3
 800423a:	4606      	mov	r6, r0
 800423c:	b09d      	sub	sp, #116	; 0x74
 800423e:	b118      	cbz	r0, 8004248 <_vfiprintf_r+0x18>
 8004240:	6983      	ldr	r3, [r0, #24]
 8004242:	b90b      	cbnz	r3, 8004248 <_vfiprintf_r+0x18>
 8004244:	f7ff fdea 	bl	8003e1c <__sinit>
 8004248:	4b89      	ldr	r3, [pc, #548]	; (8004470 <_vfiprintf_r+0x240>)
 800424a:	429d      	cmp	r5, r3
 800424c:	d11b      	bne.n	8004286 <_vfiprintf_r+0x56>
 800424e:	6875      	ldr	r5, [r6, #4]
 8004250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004252:	07d9      	lsls	r1, r3, #31
 8004254:	d405      	bmi.n	8004262 <_vfiprintf_r+0x32>
 8004256:	89ab      	ldrh	r3, [r5, #12]
 8004258:	059a      	lsls	r2, r3, #22
 800425a:	d402      	bmi.n	8004262 <_vfiprintf_r+0x32>
 800425c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800425e:	f7ff fe7b 	bl	8003f58 <__retarget_lock_acquire_recursive>
 8004262:	89ab      	ldrh	r3, [r5, #12]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	d501      	bpl.n	800426c <_vfiprintf_r+0x3c>
 8004268:	692b      	ldr	r3, [r5, #16]
 800426a:	b9eb      	cbnz	r3, 80042a8 <_vfiprintf_r+0x78>
 800426c:	4629      	mov	r1, r5
 800426e:	4630      	mov	r0, r6
 8004270:	f7ff fc50 	bl	8003b14 <__swsetup_r>
 8004274:	b1c0      	cbz	r0, 80042a8 <_vfiprintf_r+0x78>
 8004276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004278:	07dc      	lsls	r4, r3, #31
 800427a:	d50e      	bpl.n	800429a <_vfiprintf_r+0x6a>
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	b01d      	add	sp, #116	; 0x74
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004286:	4b7b      	ldr	r3, [pc, #492]	; (8004474 <_vfiprintf_r+0x244>)
 8004288:	429d      	cmp	r5, r3
 800428a:	d101      	bne.n	8004290 <_vfiprintf_r+0x60>
 800428c:	68b5      	ldr	r5, [r6, #8]
 800428e:	e7df      	b.n	8004250 <_vfiprintf_r+0x20>
 8004290:	4b79      	ldr	r3, [pc, #484]	; (8004478 <_vfiprintf_r+0x248>)
 8004292:	429d      	cmp	r5, r3
 8004294:	bf08      	it	eq
 8004296:	68f5      	ldreq	r5, [r6, #12]
 8004298:	e7da      	b.n	8004250 <_vfiprintf_r+0x20>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	0598      	lsls	r0, r3, #22
 800429e:	d4ed      	bmi.n	800427c <_vfiprintf_r+0x4c>
 80042a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042a2:	f7ff fe5a 	bl	8003f5a <__retarget_lock_release_recursive>
 80042a6:	e7e9      	b.n	800427c <_vfiprintf_r+0x4c>
 80042a8:	2300      	movs	r3, #0
 80042aa:	9309      	str	r3, [sp, #36]	; 0x24
 80042ac:	2320      	movs	r3, #32
 80042ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042b2:	2330      	movs	r3, #48	; 0x30
 80042b4:	f04f 0901 	mov.w	r9, #1
 80042b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800447c <_vfiprintf_r+0x24c>
 80042c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042c4:	4623      	mov	r3, r4
 80042c6:	469a      	mov	sl, r3
 80042c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042cc:	b10a      	cbz	r2, 80042d2 <_vfiprintf_r+0xa2>
 80042ce:	2a25      	cmp	r2, #37	; 0x25
 80042d0:	d1f9      	bne.n	80042c6 <_vfiprintf_r+0x96>
 80042d2:	ebba 0b04 	subs.w	fp, sl, r4
 80042d6:	d00b      	beq.n	80042f0 <_vfiprintf_r+0xc0>
 80042d8:	465b      	mov	r3, fp
 80042da:	4622      	mov	r2, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff ff93 	bl	800420a <__sfputs_r>
 80042e4:	3001      	adds	r0, #1
 80042e6:	f000 80aa 	beq.w	800443e <_vfiprintf_r+0x20e>
 80042ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ec:	445a      	add	r2, fp
 80042ee:	9209      	str	r2, [sp, #36]	; 0x24
 80042f0:	f89a 3000 	ldrb.w	r3, [sl]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a2 	beq.w	800443e <_vfiprintf_r+0x20e>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004304:	f10a 0a01 	add.w	sl, sl, #1
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	9307      	str	r3, [sp, #28]
 800430c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004310:	931a      	str	r3, [sp, #104]	; 0x68
 8004312:	4654      	mov	r4, sl
 8004314:	2205      	movs	r2, #5
 8004316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431a:	4858      	ldr	r0, [pc, #352]	; (800447c <_vfiprintf_r+0x24c>)
 800431c:	f000 faf8 	bl	8004910 <memchr>
 8004320:	9a04      	ldr	r2, [sp, #16]
 8004322:	b9d8      	cbnz	r0, 800435c <_vfiprintf_r+0x12c>
 8004324:	06d1      	lsls	r1, r2, #27
 8004326:	bf44      	itt	mi
 8004328:	2320      	movmi	r3, #32
 800432a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800432e:	0713      	lsls	r3, r2, #28
 8004330:	bf44      	itt	mi
 8004332:	232b      	movmi	r3, #43	; 0x2b
 8004334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004338:	f89a 3000 	ldrb.w	r3, [sl]
 800433c:	2b2a      	cmp	r3, #42	; 0x2a
 800433e:	d015      	beq.n	800436c <_vfiprintf_r+0x13c>
 8004340:	4654      	mov	r4, sl
 8004342:	2000      	movs	r0, #0
 8004344:	f04f 0c0a 	mov.w	ip, #10
 8004348:	9a07      	ldr	r2, [sp, #28]
 800434a:	4621      	mov	r1, r4
 800434c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004350:	3b30      	subs	r3, #48	; 0x30
 8004352:	2b09      	cmp	r3, #9
 8004354:	d94e      	bls.n	80043f4 <_vfiprintf_r+0x1c4>
 8004356:	b1b0      	cbz	r0, 8004386 <_vfiprintf_r+0x156>
 8004358:	9207      	str	r2, [sp, #28]
 800435a:	e014      	b.n	8004386 <_vfiprintf_r+0x156>
 800435c:	eba0 0308 	sub.w	r3, r0, r8
 8004360:	fa09 f303 	lsl.w	r3, r9, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	46a2      	mov	sl, r4
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	e7d2      	b.n	8004312 <_vfiprintf_r+0xe2>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	1d19      	adds	r1, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	9103      	str	r1, [sp, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfbb      	ittet	lt
 8004378:	425b      	neglt	r3, r3
 800437a:	f042 0202 	orrlt.w	r2, r2, #2
 800437e:	9307      	strge	r3, [sp, #28]
 8004380:	9307      	strlt	r3, [sp, #28]
 8004382:	bfb8      	it	lt
 8004384:	9204      	strlt	r2, [sp, #16]
 8004386:	7823      	ldrb	r3, [r4, #0]
 8004388:	2b2e      	cmp	r3, #46	; 0x2e
 800438a:	d10c      	bne.n	80043a6 <_vfiprintf_r+0x176>
 800438c:	7863      	ldrb	r3, [r4, #1]
 800438e:	2b2a      	cmp	r3, #42	; 0x2a
 8004390:	d135      	bne.n	80043fe <_vfiprintf_r+0x1ce>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	3402      	adds	r4, #2
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	9203      	str	r2, [sp, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	bfb8      	it	lt
 80043a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004480 <_vfiprintf_r+0x250>
 80043aa:	2203      	movs	r2, #3
 80043ac:	4650      	mov	r0, sl
 80043ae:	7821      	ldrb	r1, [r4, #0]
 80043b0:	f000 faae 	bl	8004910 <memchr>
 80043b4:	b140      	cbz	r0, 80043c8 <_vfiprintf_r+0x198>
 80043b6:	2340      	movs	r3, #64	; 0x40
 80043b8:	eba0 000a 	sub.w	r0, r0, sl
 80043bc:	fa03 f000 	lsl.w	r0, r3, r0
 80043c0:	9b04      	ldr	r3, [sp, #16]
 80043c2:	3401      	adds	r4, #1
 80043c4:	4303      	orrs	r3, r0
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	2206      	movs	r2, #6
 80043ce:	482d      	ldr	r0, [pc, #180]	; (8004484 <_vfiprintf_r+0x254>)
 80043d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d4:	f000 fa9c 	bl	8004910 <memchr>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d03f      	beq.n	800445c <_vfiprintf_r+0x22c>
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <_vfiprintf_r+0x258>)
 80043de:	bb1b      	cbnz	r3, 8004428 <_vfiprintf_r+0x1f8>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	3307      	adds	r3, #7
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	3308      	adds	r3, #8
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ee:	443b      	add	r3, r7
 80043f0:	9309      	str	r3, [sp, #36]	; 0x24
 80043f2:	e767      	b.n	80042c4 <_vfiprintf_r+0x94>
 80043f4:	460c      	mov	r4, r1
 80043f6:	2001      	movs	r0, #1
 80043f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043fc:	e7a5      	b.n	800434a <_vfiprintf_r+0x11a>
 80043fe:	2300      	movs	r3, #0
 8004400:	f04f 0c0a 	mov.w	ip, #10
 8004404:	4619      	mov	r1, r3
 8004406:	3401      	adds	r4, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4620      	mov	r0, r4
 800440c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004410:	3a30      	subs	r2, #48	; 0x30
 8004412:	2a09      	cmp	r2, #9
 8004414:	d903      	bls.n	800441e <_vfiprintf_r+0x1ee>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0c5      	beq.n	80043a6 <_vfiprintf_r+0x176>
 800441a:	9105      	str	r1, [sp, #20]
 800441c:	e7c3      	b.n	80043a6 <_vfiprintf_r+0x176>
 800441e:	4604      	mov	r4, r0
 8004420:	2301      	movs	r3, #1
 8004422:	fb0c 2101 	mla	r1, ip, r1, r2
 8004426:	e7f0      	b.n	800440a <_vfiprintf_r+0x1da>
 8004428:	ab03      	add	r3, sp, #12
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	462a      	mov	r2, r5
 800442e:	4630      	mov	r0, r6
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <_vfiprintf_r+0x25c>)
 8004432:	a904      	add	r1, sp, #16
 8004434:	f3af 8000 	nop.w
 8004438:	4607      	mov	r7, r0
 800443a:	1c78      	adds	r0, r7, #1
 800443c:	d1d6      	bne.n	80043ec <_vfiprintf_r+0x1bc>
 800443e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004440:	07d9      	lsls	r1, r3, #31
 8004442:	d405      	bmi.n	8004450 <_vfiprintf_r+0x220>
 8004444:	89ab      	ldrh	r3, [r5, #12]
 8004446:	059a      	lsls	r2, r3, #22
 8004448:	d402      	bmi.n	8004450 <_vfiprintf_r+0x220>
 800444a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800444c:	f7ff fd85 	bl	8003f5a <__retarget_lock_release_recursive>
 8004450:	89ab      	ldrh	r3, [r5, #12]
 8004452:	065b      	lsls	r3, r3, #25
 8004454:	f53f af12 	bmi.w	800427c <_vfiprintf_r+0x4c>
 8004458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800445a:	e711      	b.n	8004280 <_vfiprintf_r+0x50>
 800445c:	ab03      	add	r3, sp, #12
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	462a      	mov	r2, r5
 8004462:	4630      	mov	r0, r6
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <_vfiprintf_r+0x25c>)
 8004466:	a904      	add	r1, sp, #16
 8004468:	f000 f882 	bl	8004570 <_printf_i>
 800446c:	e7e4      	b.n	8004438 <_vfiprintf_r+0x208>
 800446e:	bf00      	nop
 8004470:	08004ad4 	.word	0x08004ad4
 8004474:	08004af4 	.word	0x08004af4
 8004478:	08004ab4 	.word	0x08004ab4
 800447c:	08004b14 	.word	0x08004b14
 8004480:	08004b1a 	.word	0x08004b1a
 8004484:	08004b1e 	.word	0x08004b1e
 8004488:	00000000 	.word	0x00000000
 800448c:	0800420b 	.word	0x0800420b

08004490 <_printf_common>:
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	4616      	mov	r6, r2
 8004496:	4699      	mov	r9, r3
 8004498:	688a      	ldr	r2, [r1, #8]
 800449a:	690b      	ldr	r3, [r1, #16]
 800449c:	4607      	mov	r7, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	bfb8      	it	lt
 80044a2:	4613      	movlt	r3, r2
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044aa:	460c      	mov	r4, r1
 80044ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b0:	b10a      	cbz	r2, 80044b6 <_printf_common+0x26>
 80044b2:	3301      	adds	r3, #1
 80044b4:	6033      	str	r3, [r6, #0]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	0699      	lsls	r1, r3, #26
 80044ba:	bf42      	ittt	mi
 80044bc:	6833      	ldrmi	r3, [r6, #0]
 80044be:	3302      	addmi	r3, #2
 80044c0:	6033      	strmi	r3, [r6, #0]
 80044c2:	6825      	ldr	r5, [r4, #0]
 80044c4:	f015 0506 	ands.w	r5, r5, #6
 80044c8:	d106      	bne.n	80044d8 <_printf_common+0x48>
 80044ca:	f104 0a19 	add.w	sl, r4, #25
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	6832      	ldr	r2, [r6, #0]
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	dc28      	bgt.n	800452a <_printf_common+0x9a>
 80044d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044dc:	1e13      	subs	r3, r2, #0
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	bf18      	it	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	0692      	lsls	r2, r2, #26
 80044e6:	d42d      	bmi.n	8004544 <_printf_common+0xb4>
 80044e8:	4649      	mov	r1, r9
 80044ea:	4638      	mov	r0, r7
 80044ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f0:	47c0      	blx	r8
 80044f2:	3001      	adds	r0, #1
 80044f4:	d020      	beq.n	8004538 <_printf_common+0xa8>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	68e5      	ldr	r5, [r4, #12]
 80044fa:	f003 0306 	and.w	r3, r3, #6
 80044fe:	2b04      	cmp	r3, #4
 8004500:	bf18      	it	ne
 8004502:	2500      	movne	r5, #0
 8004504:	6832      	ldr	r2, [r6, #0]
 8004506:	f04f 0600 	mov.w	r6, #0
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	bf08      	it	eq
 800450e:	1aad      	subeq	r5, r5, r2
 8004510:	6922      	ldr	r2, [r4, #16]
 8004512:	bf08      	it	eq
 8004514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004518:	4293      	cmp	r3, r2
 800451a:	bfc4      	itt	gt
 800451c:	1a9b      	subgt	r3, r3, r2
 800451e:	18ed      	addgt	r5, r5, r3
 8004520:	341a      	adds	r4, #26
 8004522:	42b5      	cmp	r5, r6
 8004524:	d11a      	bne.n	800455c <_printf_common+0xcc>
 8004526:	2000      	movs	r0, #0
 8004528:	e008      	b.n	800453c <_printf_common+0xac>
 800452a:	2301      	movs	r3, #1
 800452c:	4652      	mov	r2, sl
 800452e:	4649      	mov	r1, r9
 8004530:	4638      	mov	r0, r7
 8004532:	47c0      	blx	r8
 8004534:	3001      	adds	r0, #1
 8004536:	d103      	bne.n	8004540 <_printf_common+0xb0>
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	3501      	adds	r5, #1
 8004542:	e7c4      	b.n	80044ce <_printf_common+0x3e>
 8004544:	2030      	movs	r0, #48	; 0x30
 8004546:	18e1      	adds	r1, r4, r3
 8004548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004552:	4422      	add	r2, r4
 8004554:	3302      	adds	r3, #2
 8004556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800455a:	e7c5      	b.n	80044e8 <_printf_common+0x58>
 800455c:	2301      	movs	r3, #1
 800455e:	4622      	mov	r2, r4
 8004560:	4649      	mov	r1, r9
 8004562:	4638      	mov	r0, r7
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d0e6      	beq.n	8004538 <_printf_common+0xa8>
 800456a:	3601      	adds	r6, #1
 800456c:	e7d9      	b.n	8004522 <_printf_common+0x92>
	...

08004570 <_printf_i>:
 8004570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	7e0f      	ldrb	r7, [r1, #24]
 8004576:	4691      	mov	r9, r2
 8004578:	2f78      	cmp	r7, #120	; 0x78
 800457a:	4680      	mov	r8, r0
 800457c:	460c      	mov	r4, r1
 800457e:	469a      	mov	sl, r3
 8004580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004586:	d807      	bhi.n	8004598 <_printf_i+0x28>
 8004588:	2f62      	cmp	r7, #98	; 0x62
 800458a:	d80a      	bhi.n	80045a2 <_printf_i+0x32>
 800458c:	2f00      	cmp	r7, #0
 800458e:	f000 80d9 	beq.w	8004744 <_printf_i+0x1d4>
 8004592:	2f58      	cmp	r7, #88	; 0x58
 8004594:	f000 80a4 	beq.w	80046e0 <_printf_i+0x170>
 8004598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800459c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045a0:	e03a      	b.n	8004618 <_printf_i+0xa8>
 80045a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045a6:	2b15      	cmp	r3, #21
 80045a8:	d8f6      	bhi.n	8004598 <_printf_i+0x28>
 80045aa:	a101      	add	r1, pc, #4	; (adr r1, 80045b0 <_printf_i+0x40>)
 80045ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045b0:	08004609 	.word	0x08004609
 80045b4:	0800461d 	.word	0x0800461d
 80045b8:	08004599 	.word	0x08004599
 80045bc:	08004599 	.word	0x08004599
 80045c0:	08004599 	.word	0x08004599
 80045c4:	08004599 	.word	0x08004599
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004599 	.word	0x08004599
 80045d0:	08004599 	.word	0x08004599
 80045d4:	08004599 	.word	0x08004599
 80045d8:	08004599 	.word	0x08004599
 80045dc:	0800472b 	.word	0x0800472b
 80045e0:	0800464d 	.word	0x0800464d
 80045e4:	0800470d 	.word	0x0800470d
 80045e8:	08004599 	.word	0x08004599
 80045ec:	08004599 	.word	0x08004599
 80045f0:	0800474d 	.word	0x0800474d
 80045f4:	08004599 	.word	0x08004599
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	08004599 	.word	0x08004599
 8004600:	08004599 	.word	0x08004599
 8004604:	08004715 	.word	0x08004715
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	602a      	str	r2, [r5, #0]
 8004610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004618:	2301      	movs	r3, #1
 800461a:	e0a4      	b.n	8004766 <_printf_i+0x1f6>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	6829      	ldr	r1, [r5, #0]
 8004620:	0606      	lsls	r6, r0, #24
 8004622:	f101 0304 	add.w	r3, r1, #4
 8004626:	d50a      	bpl.n	800463e <_printf_i+0xce>
 8004628:	680e      	ldr	r6, [r1, #0]
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	2e00      	cmp	r6, #0
 800462e:	da03      	bge.n	8004638 <_printf_i+0xc8>
 8004630:	232d      	movs	r3, #45	; 0x2d
 8004632:	4276      	negs	r6, r6
 8004634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004638:	230a      	movs	r3, #10
 800463a:	485e      	ldr	r0, [pc, #376]	; (80047b4 <_printf_i+0x244>)
 800463c:	e019      	b.n	8004672 <_printf_i+0x102>
 800463e:	680e      	ldr	r6, [r1, #0]
 8004640:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	bf18      	it	ne
 8004648:	b236      	sxthne	r6, r6
 800464a:	e7ef      	b.n	800462c <_printf_i+0xbc>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	1d19      	adds	r1, r3, #4
 8004652:	6029      	str	r1, [r5, #0]
 8004654:	0601      	lsls	r1, r0, #24
 8004656:	d501      	bpl.n	800465c <_printf_i+0xec>
 8004658:	681e      	ldr	r6, [r3, #0]
 800465a:	e002      	b.n	8004662 <_printf_i+0xf2>
 800465c:	0646      	lsls	r6, r0, #25
 800465e:	d5fb      	bpl.n	8004658 <_printf_i+0xe8>
 8004660:	881e      	ldrh	r6, [r3, #0]
 8004662:	2f6f      	cmp	r7, #111	; 0x6f
 8004664:	bf0c      	ite	eq
 8004666:	2308      	moveq	r3, #8
 8004668:	230a      	movne	r3, #10
 800466a:	4852      	ldr	r0, [pc, #328]	; (80047b4 <_printf_i+0x244>)
 800466c:	2100      	movs	r1, #0
 800466e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004672:	6865      	ldr	r5, [r4, #4]
 8004674:	2d00      	cmp	r5, #0
 8004676:	bfa8      	it	ge
 8004678:	6821      	ldrge	r1, [r4, #0]
 800467a:	60a5      	str	r5, [r4, #8]
 800467c:	bfa4      	itt	ge
 800467e:	f021 0104 	bicge.w	r1, r1, #4
 8004682:	6021      	strge	r1, [r4, #0]
 8004684:	b90e      	cbnz	r6, 800468a <_printf_i+0x11a>
 8004686:	2d00      	cmp	r5, #0
 8004688:	d04d      	beq.n	8004726 <_printf_i+0x1b6>
 800468a:	4615      	mov	r5, r2
 800468c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004690:	fb03 6711 	mls	r7, r3, r1, r6
 8004694:	5dc7      	ldrb	r7, [r0, r7]
 8004696:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800469a:	4637      	mov	r7, r6
 800469c:	42bb      	cmp	r3, r7
 800469e:	460e      	mov	r6, r1
 80046a0:	d9f4      	bls.n	800468c <_printf_i+0x11c>
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d10b      	bne.n	80046be <_printf_i+0x14e>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07de      	lsls	r6, r3, #31
 80046aa:	d508      	bpl.n	80046be <_printf_i+0x14e>
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	6861      	ldr	r1, [r4, #4]
 80046b0:	4299      	cmp	r1, r3
 80046b2:	bfde      	ittt	le
 80046b4:	2330      	movle	r3, #48	; 0x30
 80046b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046be:	1b52      	subs	r2, r2, r5
 80046c0:	6122      	str	r2, [r4, #16]
 80046c2:	464b      	mov	r3, r9
 80046c4:	4621      	mov	r1, r4
 80046c6:	4640      	mov	r0, r8
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	aa03      	add	r2, sp, #12
 80046ce:	f7ff fedf 	bl	8004490 <_printf_common>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d14c      	bne.n	8004770 <_printf_i+0x200>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b004      	add	sp, #16
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	4834      	ldr	r0, [pc, #208]	; (80047b4 <_printf_i+0x244>)
 80046e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046e6:	6829      	ldr	r1, [r5, #0]
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80046ee:	6029      	str	r1, [r5, #0]
 80046f0:	061d      	lsls	r5, r3, #24
 80046f2:	d514      	bpl.n	800471e <_printf_i+0x1ae>
 80046f4:	07df      	lsls	r7, r3, #31
 80046f6:	bf44      	itt	mi
 80046f8:	f043 0320 	orrmi.w	r3, r3, #32
 80046fc:	6023      	strmi	r3, [r4, #0]
 80046fe:	b91e      	cbnz	r6, 8004708 <_printf_i+0x198>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f023 0320 	bic.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	2310      	movs	r3, #16
 800470a:	e7af      	b.n	800466c <_printf_i+0xfc>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	f043 0320 	orr.w	r3, r3, #32
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	2378      	movs	r3, #120	; 0x78
 8004716:	4828      	ldr	r0, [pc, #160]	; (80047b8 <_printf_i+0x248>)
 8004718:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800471c:	e7e3      	b.n	80046e6 <_printf_i+0x176>
 800471e:	0659      	lsls	r1, r3, #25
 8004720:	bf48      	it	mi
 8004722:	b2b6      	uxthmi	r6, r6
 8004724:	e7e6      	b.n	80046f4 <_printf_i+0x184>
 8004726:	4615      	mov	r5, r2
 8004728:	e7bb      	b.n	80046a2 <_printf_i+0x132>
 800472a:	682b      	ldr	r3, [r5, #0]
 800472c:	6826      	ldr	r6, [r4, #0]
 800472e:	1d18      	adds	r0, r3, #4
 8004730:	6961      	ldr	r1, [r4, #20]
 8004732:	6028      	str	r0, [r5, #0]
 8004734:	0635      	lsls	r5, r6, #24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	d501      	bpl.n	800473e <_printf_i+0x1ce>
 800473a:	6019      	str	r1, [r3, #0]
 800473c:	e002      	b.n	8004744 <_printf_i+0x1d4>
 800473e:	0670      	lsls	r0, r6, #25
 8004740:	d5fb      	bpl.n	800473a <_printf_i+0x1ca>
 8004742:	8019      	strh	r1, [r3, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	4615      	mov	r5, r2
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	e7ba      	b.n	80046c2 <_printf_i+0x152>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	2100      	movs	r1, #0
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	602a      	str	r2, [r5, #0]
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f8d9 	bl	8004910 <memchr>
 800475e:	b108      	cbz	r0, 8004764 <_printf_i+0x1f4>
 8004760:	1b40      	subs	r0, r0, r5
 8004762:	6060      	str	r0, [r4, #4]
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476e:	e7a8      	b.n	80046c2 <_printf_i+0x152>
 8004770:	462a      	mov	r2, r5
 8004772:	4649      	mov	r1, r9
 8004774:	4640      	mov	r0, r8
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	47d0      	blx	sl
 800477a:	3001      	adds	r0, #1
 800477c:	d0ab      	beq.n	80046d6 <_printf_i+0x166>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	d413      	bmi.n	80047ac <_printf_i+0x23c>
 8004784:	68e0      	ldr	r0, [r4, #12]
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	4298      	cmp	r0, r3
 800478a:	bfb8      	it	lt
 800478c:	4618      	movlt	r0, r3
 800478e:	e7a4      	b.n	80046da <_printf_i+0x16a>
 8004790:	2301      	movs	r3, #1
 8004792:	4632      	mov	r2, r6
 8004794:	4649      	mov	r1, r9
 8004796:	4640      	mov	r0, r8
 8004798:	47d0      	blx	sl
 800479a:	3001      	adds	r0, #1
 800479c:	d09b      	beq.n	80046d6 <_printf_i+0x166>
 800479e:	3501      	adds	r5, #1
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	9903      	ldr	r1, [sp, #12]
 80047a4:	1a5b      	subs	r3, r3, r1
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	dcf2      	bgt.n	8004790 <_printf_i+0x220>
 80047aa:	e7eb      	b.n	8004784 <_printf_i+0x214>
 80047ac:	2500      	movs	r5, #0
 80047ae:	f104 0619 	add.w	r6, r4, #25
 80047b2:	e7f5      	b.n	80047a0 <_printf_i+0x230>
 80047b4:	08004b25 	.word	0x08004b25
 80047b8:	08004b36 	.word	0x08004b36

080047bc <_sbrk_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	2300      	movs	r3, #0
 80047c0:	4d05      	ldr	r5, [pc, #20]	; (80047d8 <_sbrk_r+0x1c>)
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fc fb28 	bl	8000e1c <_sbrk>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_sbrk_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_sbrk_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200001e4 	.word	0x200001e4

080047dc <__sread>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	460c      	mov	r4, r1
 80047e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e4:	f000 f8ae 	bl	8004944 <_read_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	bfab      	itete	ge
 80047ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047ee:	89a3      	ldrhlt	r3, [r4, #12]
 80047f0:	181b      	addge	r3, r3, r0
 80047f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047f6:	bfac      	ite	ge
 80047f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80047fa:	81a3      	strhlt	r3, [r4, #12]
 80047fc:	bd10      	pop	{r4, pc}

080047fe <__swrite>:
 80047fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	461f      	mov	r7, r3
 8004804:	898b      	ldrh	r3, [r1, #12]
 8004806:	4605      	mov	r5, r0
 8004808:	05db      	lsls	r3, r3, #23
 800480a:	460c      	mov	r4, r1
 800480c:	4616      	mov	r6, r2
 800480e:	d505      	bpl.n	800481c <__swrite+0x1e>
 8004810:	2302      	movs	r3, #2
 8004812:	2200      	movs	r2, #0
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	f000 f868 	bl	80048ec <_lseek_r>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	4632      	mov	r2, r6
 8004820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	4628      	mov	r0, r5
 8004828:	463b      	mov	r3, r7
 800482a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	f000 b817 	b.w	8004864 <_write_r>

08004836 <__sseek>:
 8004836:	b510      	push	{r4, lr}
 8004838:	460c      	mov	r4, r1
 800483a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483e:	f000 f855 	bl	80048ec <_lseek_r>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	bf15      	itete	ne
 8004848:	6560      	strne	r0, [r4, #84]	; 0x54
 800484a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800484e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004852:	81a3      	strheq	r3, [r4, #12]
 8004854:	bf18      	it	ne
 8004856:	81a3      	strhne	r3, [r4, #12]
 8004858:	bd10      	pop	{r4, pc}

0800485a <__sclose>:
 800485a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485e:	f000 b813 	b.w	8004888 <_close_r>
	...

08004864 <_write_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	4611      	mov	r1, r2
 800486c:	2200      	movs	r2, #0
 800486e:	4d05      	ldr	r5, [pc, #20]	; (8004884 <_write_r+0x20>)
 8004870:	602a      	str	r2, [r5, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f7fc fa85 	bl	8000d82 <_write>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_write_r+0x1e>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_write_r+0x1e>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	200001e4 	.word	0x200001e4

08004888 <_close_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	2300      	movs	r3, #0
 800488c:	4d05      	ldr	r5, [pc, #20]	; (80048a4 <_close_r+0x1c>)
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc fa91 	bl	8000dba <_close>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_close_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_close_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	200001e4 	.word	0x200001e4

080048a8 <_fstat_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	2300      	movs	r3, #0
 80048ac:	4d06      	ldr	r5, [pc, #24]	; (80048c8 <_fstat_r+0x20>)
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	f7fc fa8b 	bl	8000dd0 <_fstat>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	d102      	bne.n	80048c4 <_fstat_r+0x1c>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	b103      	cbz	r3, 80048c4 <_fstat_r+0x1c>
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	200001e4 	.word	0x200001e4

080048cc <_isatty_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	2300      	movs	r3, #0
 80048d0:	4d05      	ldr	r5, [pc, #20]	; (80048e8 <_isatty_r+0x1c>)
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fc fa89 	bl	8000dee <_isatty>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_isatty_r+0x1a>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_isatty_r+0x1a>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200001e4 	.word	0x200001e4

080048ec <_lseek_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	2200      	movs	r2, #0
 80048f6:	4d05      	ldr	r5, [pc, #20]	; (800490c <_lseek_r+0x20>)
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc fa81 	bl	8000e02 <_lseek>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_lseek_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_lseek_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200001e4 	.word	0x200001e4

08004910 <memchr>:
 8004910:	4603      	mov	r3, r0
 8004912:	b510      	push	{r4, lr}
 8004914:	b2c9      	uxtb	r1, r1
 8004916:	4402      	add	r2, r0
 8004918:	4293      	cmp	r3, r2
 800491a:	4618      	mov	r0, r3
 800491c:	d101      	bne.n	8004922 <memchr+0x12>
 800491e:	2000      	movs	r0, #0
 8004920:	e003      	b.n	800492a <memchr+0x1a>
 8004922:	7804      	ldrb	r4, [r0, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	428c      	cmp	r4, r1
 8004928:	d1f6      	bne.n	8004918 <memchr+0x8>
 800492a:	bd10      	pop	{r4, pc}

0800492c <__malloc_lock>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__malloc_lock+0x8>)
 800492e:	f7ff bb13 	b.w	8003f58 <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	200001d8 	.word	0x200001d8

08004938 <__malloc_unlock>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__malloc_unlock+0x8>)
 800493a:	f7ff bb0e 	b.w	8003f5a <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	200001d8 	.word	0x200001d8

08004944 <_read_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	2200      	movs	r2, #0
 800494e:	4d05      	ldr	r5, [pc, #20]	; (8004964 <_read_r+0x20>)
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	f7fc f9f8 	bl	8000d48 <_read>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_read_r+0x1e>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_read_r+0x1e>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200001e4 	.word	0x200001e4

08004968 <_init>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr

08004974 <_fini>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr
